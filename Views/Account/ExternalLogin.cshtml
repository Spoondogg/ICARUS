@using ICARUS.Models
@using Microsoft.Owin.Security
@model ICARUS.Models.ExternalLoginListViewModel
@{
    ViewBag.Title = "ExternalLogin";
}
@section viewInit {
    @if (User.Identity.IsAuthenticated) {
        <script type="text/javascript">
            console.log(100, 'You are already logged in.\nRedirecting...');
            setTimeout(() => {
                window.location.href = '/';
            }, 1000);
        </script>
    } else {
        var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
        @*
            See <a href="http://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
            for details on setting up this ASP.NET application to support logging in via external services
        *@
        if (loginProviders.Count() == 0) {
            <div>
                <p>There are no external authentication services configured</p>
            </div>
        } else {
            <form id="login-external"
                  action="/Account/ExternalLogin/externalLogin?ReturnUrl=%2F"
                  method="post" style="display:none;">
                @Html.AntiForgeryToken()
                <input type="hidden" name="provider" value="@Request["provider"]" />
            </form>
            <script>
                let url = new URL(window.location.href);
                let returnUrl = url.searchParams.get('returnUrl');
                let provider = url.searchParams.get('provider');
                setTimeout(() => {
                    console.warn('provider @Request["provider"]', 'url ' + url, 'returnUrl ' + returnUrl);
                }, 3000);
                // Submit the form when applicable
                if (returnUrl !== '/') {
                    document.getElementById('login-external').submit();
                } else {
                    console.log(url, returnUrl, provider);
                }
            </script>
        }
        @*<script src="@Url.Content("~/Scripts/init.js")" type="module"></script>*@
    }
}