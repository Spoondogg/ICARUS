@using ICARUS.Models
@using Microsoft.Owin.Security
@model ICARUS.Models.ExternalLoginListViewModel
@{
    ViewBag.Title = "ExternalLogin";
}
@section viewInit {
    @if (User.Identity.IsAuthenticated) {
        <script type="text/javascript">
            console.log(100, 'You are already logged in.\nRedirecting...');
            setTimeout(() => {
                window.location.href = '/';
            }, 1000);
        </script>
    } else {
        var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
        @*
            See <a href="http://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
            for details on setting up this ASP.NET application to support logging in via external services
        *@
        if (loginProviders.Count() == 0) {
            <div style="background-color:white;"><p>There are no external authentication services configured</p></div>
        } else {
            <div style="background-color:white;">
                <div class="progress">
                    <div class="progress-bar progress-bar-info progress-bar-striped"
                         aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"
                         style="width: 100%;">
                        <div class="text">Authenticating...</div>
                    </div>
                </div>
                <form id="login-external" class="login-external"
                      action="/Account/ExternalLogin/externalLogin?ReturnUrl=%2F"
                      method="post" style="display:none;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="provider" value="@Request["provider"]" />
                </form>
            </div>
            <script>
                //let loader = new LOADER(0, 'Authenticating...');
                //loader.show();
                let url = new URL(window.location.href);
                let returnUrl = url.searchParams.get('returnUrl');
                let provider = url.searchParams.get('provider');
                let requestProvider = '@Request["provider"]';
                setTimeout(() => {
                    console.warn('provider @Request["provider"]', 'url ' + url, 'returnUrl ' + returnUrl);
                }, 3000);

                /*
                // Post back to Opener
                window.opener.postMessage({
                    returnUrl,
                    provider,
                    requestProvider
                }, returnUrl);
                */

                // THIS IS THE FUNCTIONAL OPTION
                if (returnUrl !== '/') {
                    document.getElementById('login-external').submit();
                    //$('#login-external').submit();
                } else {
                    console.log(url, returnUrl, provider);
                }

                /*
                console.log('TOKEN', $('body input[name="__RequestVerificationToken"]')[0].value);
                $.post('/Account/ExternalLogin', {
                    ReturnUrl: '/',
                    provider: 'Request["provider"]', //(starts with at symbol)
                    '__RequestVerificationToken': $('body input[name="__RequestVerificationToken"]')[0].value
                }, (data, response, woot) => {
                    console.log('POST', data, response, woot);
                    if (response === 'success') {
                        //$(document.body).html(data);

                        let url = new URL(window.location.href);
                        let returnUrl = url.searchParams.get('ReturnUrl');
                        if (returnUrl) {
                            location.href = url.origin; // + returnUrl;
                            //location.href = returnUrl;
                        } else {
                            location.reload(true);
                        }

                    }
                });
                */
            </script>
        }
        @*<script src="@Url.Content("~/Scripts/init.js")" type="module"></script>*@
    }
}