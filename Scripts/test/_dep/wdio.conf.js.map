{"version":3,"sources":["../../test/wdio.conf.js"],"names":["exports","config","specs","exclude","maxInstances","capabilities","browserName","sync","logLevel","coloredLogs","screenshotPath","baseUrl","waitforTimeout","connectionRetryTimeout","connectionRetryCount","services","framework","reporters","mochaOpts","ui"],"mappings":"AACAA,QAAQC,OAAS,CAWbC,MAAO,CACH,gCAGJC,QAAS,GAmBTC,aAAc,GAMdC,aAAc,CAAC,CAIXD,aAAc,EAEdE,YAAa,YAWjBC,MAAM,EAGNC,SAAU,SAGVC,aAAa,EAGbC,eAAgB,yBAIhBC,QAAS,wBAGTC,eAAgB,IAIhBC,uBAAwB,IAGxBC,qBAAsB,EAwBtBC,SAAU,GAQVC,UAAW,QAKXC,UAAW,CAAC,QAKZC,UAAW,CACPC,GAAI","file":"wdio.conf.js","sourcesContent":["// wdio.conf.js\r\nexports.config = {\r\n\r\n    //\r\n    // ==================\r\n    // Specify Test Files\r\n    // ==================\r\n    // Define which test specs should run. The pattern is relative to the directory\r\n    // from which `wdio` was called. Notice that, if you are calling `wdio` from an\r\n    // NPM script (see https://docs.npmjs.com/cli/run-script) then the current working\r\n    // directory is where your package.json resides, so `wdio` will be called from there.\r\n    //\r\n    specs: [\r\n        './Scripts/test/specs/**/*.js'\r\n    ],\r\n    // Patterns to exclude.\r\n    exclude: [\r\n        // 'path/to/excluded/files'\r\n    ],\r\n    //\r\n    // ============\r\n    // Capabilities\r\n    // ============\r\n    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\r\n    // time. Depending on the number of capabilities, WebdriverIO launches several test\r\n    // sessions. Within your capabilities you can overwrite the spec and exclude options in\r\n    // order to group specific specs to a specific capability.\r\n    //\r\n    // First, you can define how many instances should be started at the same time. Let's\r\n    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\r\n    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\r\n    // files and you set maxInstances to 10, all spec files will get tested at the same time\r\n    // and 30 processes will get spawned. The property handles how many capabilities\r\n    // from the same test should run tests.\r\n    //\r\n    maxInstances: 10,\r\n    //\r\n    // If you have trouble getting all important capabilities together, check out the\r\n    // Sauce Labs platform configurator - a great tool to configure your capabilities:\r\n    // https://docs.saucelabs.com/reference/platforms-configurator\r\n    //\r\n    capabilities: [{\r\n        // maxInstances can get overwritten per capability. So if you have an in-house Selenium\r\n        // grid with only 5 firefox instances available you can make sure that not more than\r\n        // 5 instances get started at a time.\r\n        maxInstances: 5,\r\n        //\r\n        browserName: 'firefox'\r\n    }],\r\n    //\r\n    // ===================\r\n    // Test Configurations\r\n    // ===================\r\n    // Define all options that are relevant for the WebdriverIO instance here\r\n    //\r\n    // By default WebdriverIO commands are executed in a synchronous way using\r\n    // the wdio-sync package. If you still want to run your tests in an async way\r\n    // e.g. using promises you can set the sync option to false.\r\n    sync: true,\r\n    //\r\n    // Level of logging verbosity: silent | verbose | command | data | result | error\r\n    logLevel: 'silent',\r\n    //\r\n    // Enables colors for log output.\r\n    coloredLogs: true,\r\n    //\r\n    // Saves a screenshot to a given path if a command fails.\r\n    screenshotPath: './Scripts/test/errors/',\r\n    //\r\n    // Set a base URL in order to shorten url command calls. If your url parameter starts\r\n    // with \"/\", then the base url gets prepended.\r\n    baseUrl: 'http://localhost:9001',\r\n    //\r\n    // Default timeout for all waitFor* commands.\r\n    waitforTimeout: 10000,\r\n    //\r\n    // Default timeout in milliseconds for request\r\n    // if Selenium Grid doesn't send response\r\n    connectionRetryTimeout: 90000,\r\n    //\r\n    // Default request retries count\r\n    connectionRetryCount: 3,\r\n    //\r\n    // Initialize the browser instance with a WebdriverIO plugin. The object should have the\r\n    // plugin name as key and the desired plugin options as properties. Make sure you have\r\n    // the plugin installed before running any tests. The following plugins are currently\r\n    // available:\r\n    // WebdriverCSS: https://github.com/webdriverio/webdrivercss\r\n    // WebdriverRTC: https://github.com/webdriverio/webdriverrtc\r\n    // Browserevent: https://github.com/webdriverio/browserevent\r\n    // plugins: {\r\n    // webdrivercss: {\r\n    // screenshotRoot: 'my-shots',\r\n    // failedComparisonsRoot: 'diffs',\r\n    // misMatchTolerance: 0.05,\r\n    // screenWidth: [320,480,640,1024]\r\n    // },\r\n    // webdriverrtc: {},\r\n    // browserevent: {}\r\n    // },\r\n    //\r\n    // Test runner services\r\n    // Services take over a specific job you don't want to take care of. They enhance\r\n    // your test setup with almost no effort. Unlike plugins, they don't add new\r\n    // commands. Instead, they hook themselves up into the test process.\r\n    services: [/*'selenium-standalone','phantomjs'*/],\r\n    //\r\n    // Framework you want to run your specs with.\r\n    // The following are supported: Mocha, Jasmine, and Cucumber\r\n    // see also: http://webdriver.io/guide/testrunner/frameworks.html\r\n    //\r\n    // Make sure you have the wdio adapter package for the specific framework installed\r\n    // before running any tests.\r\n    framework: 'mocha',\r\n    //\r\n    // Test reporter for stdout.\r\n    // The only one supported by default is 'dot'\r\n    // see also: http://webdriver.io/guide/testrunner/reporters.html\r\n    reporters: ['spec'],\r\n\r\n    //\r\n    // Options to be passed to Mocha.\r\n    // See the full list at http://mochajs.org/\r\n    mochaOpts: {\r\n        ui: 'bdd'\r\n    },\r\n    //\r\n    // =====\r\n    // Hooks\r\n    // =====\r\n    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\r\n    // it and to build services around it. You can either apply a single function or an array of\r\n    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\r\n    // resolved to continue.\r\n    //\r\n    // Gets executed once before all workers get launched.\r\n    // onPrepare: function (config, capabilities) {\r\n    // },\r\n    //\r\n    // Gets executed before test execution begins. At this point you can access all global\r\n    // variables, such as `browser`. It is the perfect place to define custom commands.\r\n    // before: function (capabilities, specs) {\r\n    // },\r\n    //\r\n    // Hook that gets executed before the suite starts\r\n    // beforeSuite: function (suite) {\r\n    // },\r\n    //\r\n    // Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\r\n    // beforeEach in Mocha)\r\n    // beforeHook: function () {\r\n    // },\r\n    //\r\n    // Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\r\n    // afterEach in Mocha)\r\n    // afterHook: function () {\r\n    // },\r\n    //\r\n    // Function to be executed before a test (in Mocha/Jasmine) or a step (in Cucumber) starts.\r\n    // beforeTest: function (test) {\r\n    // },\r\n    //\r\n    // Runs before a WebdriverIO command gets executed.\r\n    // beforeCommand: function (commandName, args) {\r\n    // },\r\n    //\r\n    // Runs after a WebdriverIO command gets executed\r\n    // afterCommand: function (commandName, args, result, error) {\r\n    // },\r\n    //\r\n    // Function to be executed after a test (in Mocha/Jasmine) or a step (in Cucumber) starts.\r\n    // afterTest: function (test) {\r\n    // },\r\n    //\r\n    // Hook that gets executed after the suite has ended\r\n    // afterSuite: function (suite) {\r\n    // },\r\n    //\r\n    // Gets executed after all tests are done. You still have access to all global variables from\r\n    // the test.\r\n    // after: function (result, capabilities, specs) {\r\n    // },\r\n    //\r\n    // Gets executed after all workers got shut down and the process is about to exit. It is not\r\n    // possible to defer the end of the process using a promise.\r\n    // onComplete: function(exitCode) {\r\n    // }\r\n}"]}