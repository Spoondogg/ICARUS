{"version":3,"sources":["../../test/_dep/test-browser.js"],"names":["describe","it","done","browser","version","then","v","console","log","expect","to","be","true"],"mappings":"AAgBAA,SAAS,UAAW,KAChBC,GAAG,4BAA8BC,IAC7BC,QACKC,UACAC,KAAMC,IACHC,QAAQC,IAAI,wBAA0BF,GAEtCG,QAAO,GAAMC,GAAGC,GAAGC,KAEnBV","file":"test-browser.js","sourcesContent":["/** Various tests for the DOM using mochaChrome\r\nconsole.log(this);\r\ndescribe('DOM', () => {\r\n    it('has the expected page title', () => {\r\n        expect(document.title).to.equal('ICARUS Testing');\r\n    });\r\n    it('has the expected token metadata', () => {\r\n        expect(document.getElementsByTagName('meta').token.content).is.not.empty;\r\n    });\r\n});*/\r\n/** Attempt to Log in \r\ndescribe('LOGIN', () => {\r\n    it('has the expected h1', () => {\r\n        expect(document.getElementById('header').innerHTML).to.equal('Hello World');\r\n    });\r\n});*/\r\ndescribe('Browser', () => {\r\n    it('should launch the browser', (done) => {\r\n        browser\r\n            .version()\r\n            .then((v) => {\r\n                console.log('\\t - Chrome Version: ' + v);\r\n\r\n                expect(true).to.be.true;\r\n\r\n                done();\r\n            })\r\n    });\r\n});\r\n/*\r\ndescribe('sample test', function () {\r\n    let page;\r\n\r\n    before(async function () {\r\n        page = await browser.newPage();\r\n        await page.goto('http://localhost:8052');\r\n    });\r\n\r\n    after(async function () {\r\n        await page.close();\r\n    })\r\n\r\n    it('should have the correct page title', async function () {\r\n        expect(await page.title()).to.eql('Puppeteer Mocha');\r\n    });\r\n\r\n    it('should have a heading', async function () {\r\n        const HEADING_SELECTOR = 'h1';\r\n        let heading;\r\n\r\n        await page.waitFor(HEADING_SELECTOR);\r\n        heading = await page.$eval(HEADING_SELECTOR, heading => heading.innerText);\r\n\r\n        expect(heading).to.eql('Page Title');\r\n    });\r\n\r\n    it('should have a single content section', async function () {\r\n        const BODY_SELECTOR = '.main-content';\r\n\r\n        await page.waitFor(BODY_SELECTOR);\r\n\r\n        expect(await page.$$(BODY_SELECTOR)).to.have.lengthOf(1);\r\n    });\r\n});\r\n*/"]}