@model ICARUS.Models.Icarus.FormPost

@{
    ViewBag.Title = "Edit";
}


@using (Html.BeginForm()) {

              

    /*
        <div id="editForm" style="display:none;">
        <h2>Edit</h2>
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.id)

        <div class="form-horizontal">
            <h4>FormPost</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            <div class="form-group">
                @Html.LabelFor(model => model.timestamp, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.timestamp, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.timestamp, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.formId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.formId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.formId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.version, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.version, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.version, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.submitterId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.submitterId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.submitterId, "", new { @class = "text-danger" })
                </div>
            </div>

            <hr />

            <div class="form-group">
                <p>This will cause an error on submit.<br />You need to reload the source form and populate existing values to be resubmitted</p>
                @Html.LabelFor(model => model.xmlResults, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.xmlResults, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.xmlResults, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
    */
}


@* ------------------------------------------------------------------------------------------------ *@

<div id="formContainer">
    @*
        A hidden form to pass the initial formId to the server and instantiate the Icarus form object
        The 'formPostRequest' form is consumed when the Icarus Form is constructed
    *@
    <form id="formPostRequest" style="display:none">
        <p>Temp Form Contents</p>
        <input type="hidden" name="id" value="@Model.formId" />
        <input type="hidden" name="submitter" value="@User.Identity.Name" />
        <input type="hidden" name="postId" value="@Model.id" />
    </form>
</div>

@section viewInit {

    @*
        Retrieve a json object by calling an action from the FORMS controller with the given form ID

        // For security reasons, this should be a POST request
        $.getJSON('/Forms/FormObject/@Model.id', function(data){
            alert('Retrieved data:\n'+data);
        });
    *@

    <script type="text/javascript">
        console.log('Form Javascript Begins');

        // Construct an Icarus Form inside the form container
        var c = document.getElementById('formContainer');

        // Serialize the local form id
        console.log('Updating post id: ' + $("#formPostRequest")[0].children['postId'].value);
        var dataToBeSent = $("#formPostRequest").serialize();


        // Retrieve routes from RouteConfig
        var route = "@Url.RouteUrl("formObject")";
        var postRoute = "@Url.RouteUrl("formPostEdit")";
        var postGroupRoute = "@Url.RouteUrl("formGroupPost")";

        // POST request to server for the given form
        $.post(route, dataToBeSent, function (data, textStatus) {

            alert('This is incomplete.  Child nodes need to be preemptively loaded into the page before they can be populated.')

            // textStatus contains the status: success, error, etc
            // If server responds with 'success'
            if (textStatus == "success") {
                console.log('Constructing form id: ' + data.id);

                // Set values to match record in DB
                console.log('Populating "data" with existing values...');
                var xmlString = document.getElementById('xmlResults').value;
                console.log('XML: ' + xmlString);
                parser = new DOMParser();
                xmlDoc = parser.parseFromString(xmlString, "text/xml");

                var els = data.groups[0].elements;
                for (var i = 0; i < els.length; i++) {
                    var elName = els[i].name;
                    console.log('Element ' + i + ': ' + elName + ' set to ' + xmlDoc.getElementsByTagName(elName)[0].childNodes[0].nodeValue);
                    els[i].value = xmlDoc.getElementsByTagName(elName)[0].childNodes[0].nodeValue;
                }

                console.log('Constructing IcarusForm...');
                var iForm = new IcarusForm(c, data, postRoute, postGroupRoute);
                document.forms['icarusForm'].setAttribute('formPostId', @Model.id);

                // Duplicate the field id (form post id)
                var formPostId = new EL(document.forms['icarusForm'], 'input', { 'type': 'hidden', 'id': 'formPostId', 'name': 'formPostId', 'value': @Model.id });
                

            } else {
                console.log('Failed to retrieve form object from server with status: "'+textStatus+'"');
            }
        }, "json");

                
                

        // Dispose of the initial form
        c.innerHTML = "";

        console.log('Form Javascript Ends');
    </script>
}

@* ------------------------------------------------------------------------------------------------ *@


<div>
    @Html.ActionLink("Back to List", "Index")
</div>
