@model ICARUS.Models.Form
@{ ViewBag.Title = "Edit"; }
<div id="formContainer">
    @*
        A hidden form to pass the initial formId to the server and instantiate the Icarus form object
        The 'formPostRequest' form is consumed when the Icarus Form is constructed
    *@
    <form id="formPostRequest" style="display:none">

        @* The anti forgery token must be passed to IcarusForms *@
        @if (Request.IsAuthenticated) {
            @Html.AntiForgeryToken()
        }
        <input type="hidden" name="id" value="@Model.id" />
        <input type="hidden" name="submitter" value="@User.Identity.Name" />

    </form>
</div>

@*
    Retrieve a json object by calling an action from the FORMS controller with the given form ID

    // For security reasons, this should be a POST request
    $.getJSON('/Forms/FormObject/@Model.id', function(data){
        alert('Retrieved data:\n'+data);
    });
*@

<script type="text/javascript">
        alert('Edit Form Javascript Begins');

        // Construct an Icarus Form inside the form container
        var parentObj = document.getElementById('formContainer');

        var antiForgeryToken = document.getElementById('formPostRequest')['__RequestVerificationToken'];

        // Serialize the local form id
        var dataToBeSent = $("#formPostRequest").serialize();

        // Retrieve routes from RouteConfig
        var route = "@Url.RouteUrl("formObject")";
        var postRoute = "@Url.RouteUrl("formPost")";
        var postGroupRoute = "@Url.RouteUrl("formGroupPost")";

        // POST request to server for the given form
        $.post(route, dataToBeSent, function (data, textStatus) {

            // textStatus contains the status: success, error, etc
            // If server responds with 'success'
            if (textStatus == "success") {
                console.log('Constructing form id: ' + data.id);
                var iForm = new IcarusForm(parentObj, data, postRoute, postGroupRoute, antiForgeryToken.value); //antiForgeryToken
            } else {
                console.log('Failed to retrieve form object from server with status: "'+textStatus+'"');
            }
        }, "json");

        // Dispose of the initial form
        parentObj.innerHTML = "";

        console.log('Form Javascript Ends');
</script>

<!------------------------------------------------------------>

<h2>Web Forms</h2>

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()

    <h4>Edit a Web Form</h4>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)

    <div class="form-group">
        @Html.LabelFor(model => model.authorId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.EditorFor(model => model.authorId, new {
               htmlAttributes = new { @class = "form-control", @readonly = "readonly"
               } })
            @Html.ValidationMessageFor(model => model.authorId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.label, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.EditorFor(model => model.label, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.label, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.categoryId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.DropDownListFor(
                model => model.categoryId,
                new SelectList(Model.categoryItems, "Value", "Text", ViewContext.RouteData.Values["id"]),
                new { @class = "form-control" }
            )
            @Html.ValidationMessageFor(model => model.categoryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div id="sandbox" class="form-group">
        <!-- Sandbox -->
    </div>

    <div class="form-group">
        <div>
            <input type="submit" value="Edit" class="btn btn-default" />
        </div>
    </div>
    
}



<!-- ----------------------- --->
<h2>IcarusFormEditor</h2>
<div id="iFormEditor" class="form-group">
    <!-- iFormEditor -->
</div>



<!-- ----------------------- --->
<h4>@Html.ActionLink("Back to List", "Index")</h4>
<!-- WHEN THE VIEW IS INITIALIZED -->
@section viewInit {
    <script type="text/javascript">
        var inputList = new IcarusInputList(
            document.getElementById('sandbox'),
            '@Model.groups', '@Url.RouteUrl("formGroupsPost")',
            'Groups', 'groups', 'FormGroups', '@Url.RouteUrl("formCategoriesPost")'
        );

        // Create a container for the Icarus Form Editor
        var icarusFormEditor = new IcarusFormEditor(
            document.getElementById('iFormEditor'),
            '#', 'antiForgeryTokenHere'
        );

    </script>
}