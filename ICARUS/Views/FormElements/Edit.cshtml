@model ICARUS.Models.FormElement
@{
    ViewBag.Title = "Edit";
}
<div id="editContainer">
    @*
        A hidden form to pass the initial formId to the server and instantiate the Icarus form object
        The 'formPostRequest' form is consumed when the Icarus Form is constructed
    *@
    <form id="formPostRequest" style="display:block;">
        <p>Loading...</p>
        <input type="hidden" name="id" value="@Url.RequestContext.RouteData.Values["id"]" />
    </form>
</div>


<h2>Edit Form Element</h2>
@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    /*
    <h4>
        @Html.ActionLink("View Options", "Index", "FormElementOptions", new { id = Model.id }, null)  |
        @Html.ActionLink("Create Options", "Create", "FormElementOptions", new { id = Model.id }, null)
    </h4>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)
    
    <!-- BEGIN FORM GROUPS -->

    <div class="form-group">
        @Html.LabelFor(model => model.categoryId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.DropDownListFor(
                model => model.categoryId,
                new SelectList(Model.categoryItems, "Value", "Text", ViewContext.RouteData.Values["id"]),
                new { @class = "form-control" }
            )
            @Html.ValidationMessageFor(model => model.categoryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.tagId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.DropDownListFor(
                model => model.tagId,
                new SelectList(Model.tagItems, "Value", "Text", Model.SelectedTagId),
                new { @class = "form-control" }
            )

            @Html.ValidationMessageFor(model => model.tagId, "", new { @class = "text-danger" })
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.typeId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.DropDownListFor(
                model => model.typeId,
                new SelectList(Model.typeItems, "Value", "Text", Model.SelectedTypeId),
                new { @class = "form-control" }
            )
            @Html.ValidationMessageFor(model => model.typeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.authorId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.EditorFor(model => model.authorId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.authorId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control", @Value = Model.name } })
            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.label, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.EditorFor(model => model.label, new { htmlAttributes = new { @class = "form-control", @Value = Model.label } })
            @Html.ValidationMessageFor(model => model.label, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        There needs to be a constructor that creates this page.  That way you can hook into the 'tagId' and 'typeId' values to determine if 
        the sub-options value is necessary.  Not loading this object can drastically reduce hits to the DB    
    </div>

    <div id="sandbox" class="form-group">
        <!-- Sandbox -->
    </div>

    <div class="form-group">
        <div>
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
    */
}
<h4>@Html.ActionLink("Back to List", "Index")</h4>

@section viewInit {
    <script type="text/javascript">
        console.log('Editor Javascript Begins: id=@Url.RequestContext.RouteData.Values["id"]');
        alert('Watch value: data\n Using this object, construct the EDIT form');
        /*
            Construct an Icarus Form inside the form container (c)

            Send a POST request to server to retrieve the JSON object for this Form Element Editor
            If successful, construct the IcarusEditor inside parent 'editContainer'
        */
        $.post(
            '@Url.RouteUrl("formElementEditor")',
            $("#formPostRequest").serialize(),
            function (data, textStatus) {
                var container = document.getElementById('editContainer');
                if (textStatus == "success") {
                    console.log('Constructing editor id: ' + data.id);
                    container.innerHTML = "";
                    var icarusEditor = new IcarusEditor(container, '@Request.RawUrl');
                } else {
                    console.log('Failed to retrieve editor object from server with status: "'+textStatus+'"');
                }
            },
        "json");
        console.log('Form Javascript Ends');
    </script>

    <script type="text/javascript">
        /*
            Construct an Input List...  FYI, this is temporary.
            Once the Editor constructor is complete, this should just
            be an object that gets instantiated within the editor.
        */
        var inputList = new IcarusInputList(
            document.getElementById('sandbox'),
            '@Model.options',
            '@Url.RouteUrl("formOptionsPost")',
            'Options', 'options', 'FormElementOptions',
            '@Url.RouteUrl("formCategoriesPost")'
        );
    </script>
}