@model ICARUS.Models.FormElementOption
@{
    ViewBag.Title = "Create";
}
<h2>Form Element Options</h2>
<h4>Create a Form Element Option for Element Id: @ViewContext.RouteData.Values["id"])</h4>
@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()    
    <div class="form-group">
        @Html.LabelFor(model => model.parentId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.DropDownListFor(
                model => model.parentId,
                new SelectList(Model.elementItems, "Value", "Text", ViewContext.RouteData.Values["id"]),
                new { @class = "form-control" }
            )
            @Html.ValidationMessageFor(model => model.parentId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.categoryId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.DropDownListFor(
                model => model.categoryId,
                new SelectList(Model.categoryItems, "Value", "Text", ViewContext.RouteData.Values["id"]),
                new { @class = "form-control" }
            )
            @Html.ValidationMessageFor(model => model.categoryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.label, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.EditorFor(model => model.label, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.label, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.typeId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.DropDownListFor(
                model => model.typeId,
                new SelectList(Model.typeItems, "Value", "Text", Model.SelectedTypeId),
                new { @class = "form-control" }
            )
            @Html.ValidationMessageFor(model => model.typeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.value, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.EditorFor(model => model.value, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.value, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.childGroupId, htmlAttributes: new { @class = "control-label" })
        <div>
            @Html.DropDownListFor(
                model => model.childGroupId,
                new SelectList(Model.groupItems, "Value", "Text", Model.SelectedGroupId),
                new { @class = "form-control" }
            )
            @Html.ValidationMessageFor(model => model.childGroupId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div>
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
}
<h4>@Html.ActionLink("Back to List", "Index", new { id = ViewContext.RouteData.Values["id"] })</h4>
