{"version":3,"sources":["icarus/StringMethods.js"],"names":["String","prototype","camelcase","this","split","map","word","index","toLowerCase","charAt","toUpperCase","slice","join","alphaNumeric","replace","friendly","truncate","length","ending","substring","pad","num","size","s","getDateValue","Date","parseInt","guid","s4","Math","floor","random","toString"],"mappings":"AAKAA,OAAOC,UAAUC,UAAY,WAC5B,OAAOC,KAAKC,MAAM,KAAKC,IAAI,SAASC,EAAMC,GACzC,OAAiB,IAAVA,EAAcD,EAAKE,cAAgBF,EAAKG,OAAO,GAAGC,cAAgBJ,EAAKK,MAAM,GAAGH,gBACrFI,KAAK,KAOTZ,OAAOC,UAAUY,aAAe,WAE/B,OAAOV,KAAKW,QAAQ,oBAAqB,IAAIA,QAAQ,WAAY,KAAO,IAOzEd,OAAOC,UAAUc,SAAW,WAoB3B,OAAOZ,KAAKW,QAAQ,sBAAuB,KAAO,IAQnDd,OAAOC,UAAUe,SAAW,SAASC,EAAS,IAAKC,EAAS,OAC3D,OAAIf,KAAKc,OAASA,EACVd,KAAKgB,UAAU,EAAGF,EAASC,EAAOD,QAAUC,EAE7Cf,MAQRH,OAAOC,UAAUmB,IAAM,SAASC,EAAKC,GAEpC,IAAIC,EAAIvB,OAAOqB,GACf,KAAOE,EAAEN,OAASK,GACjBC,EAAI,IAAMA,EAEX,OAAOA,GAQRvB,OAAOC,UAAUuB,aAAe,WAC/B,OAAO,IAAIC,KAAKC,SAASvB,KAAKW,QAAQ,QAAS,OAMhDd,OAAOC,UAAU0B,KAAO,WACvB,MAAMC,EAAK,IAAMC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqBC,SAAS,IAAIb,UAAU,GAClF,SAAUS,IAAOA,OAAQA,OAAQA,OAAQA,OAAQA,IAAOA,IAAOA","file":"StringMethods.js","sourcesContent":["/**\r\n    Returns string as camelcase\r\n    @see https://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\r\n    @returns {String} A camel case formatted string\r\n*/\r\nString.prototype.camelcase = function() {\r\n\treturn this.split(' ').map(function(word, index) {\r\n\t\treturn index === 0 ? word.toLowerCase() : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n\t}).join('');\r\n};\r\n/**\r\n    Returns only alphanumeric values\r\n    @see https://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\r\n    @returns {String} A string of only alphanumeric characters from given string\r\n*/\r\nString.prototype.alphaNumeric = function() {\r\n\t//return this.replace(/^[a-zA-Z0-9-_]+$/u, '').replace(/[\\[\\]']/gu, '') || '';\r\n\treturn this.replace(/^[a-zA-Z0-9-_]+$/u, '').replace(/[[\\]']/gu, '') || '';\r\n};\r\n/**\r\n    Returns a friendly formatted string, safe for html and web components\r\n    @method\r\n    @returns {String} HTML friendly string\r\n*/\r\nString.prototype.friendly = function() {\r\n\t/*try {\r\n\t\t\tlet table = {\r\n\t\t\t\t'<': 'lt',\r\n\t\t\t\t'>': 'gt',\r\n\t\t\t\t'\"': 'quot',\r\n\t\t\t\t'\\'': 'apos',\r\n\t\t\t\t'&': 'amp',\r\n\t\t\t\t'\\r': '#10',\r\n\t\t\t\t'\\n': '#13',\r\n\t\t\t\t//'?': '#63',\r\n\t\t\t\t':': '#58',\r\n\t\t\t\t';': '#59'\r\n\t\t\t};\r\n\t\t\treturn this.replace(/[<>\"'\\r\\n&]/gu, (chr) => { // Strip out characters\r\n\t\t\t\treturn '&' + table[chr] + ';';\r\n\t\t\t}).replace(/[?=\\s]+/gu, '-'); // replace spaces with dashes\r\n\t    } catch (e) {\r\n\t        throw e;\r\n\t    }*/\r\n\treturn this.replace(/^[a-z|A-Z|0-9|\\s]*/u, '') || '';\r\n};\r\n/**\r\n    Trims the given string to the specified length and applies the given ending\r\n    @param {number} length Length to trim string\r\n    @param {string} ending String to append\r\n    @returns {string} A string truncated to the given length\r\n*/\r\nString.prototype.truncate = function(length = 100, ending = \"...\") {\r\n\tif (this.length > length) {\r\n\t\treturn this.substring(0, length - ending.length) + ending;\r\n\t}\r\n\treturn this;\r\n};\r\n/**\r\n    Pad with zeroes\r\n    @param {number} num The original number to be padded\r\n    @param {number} size The number of zeros to pad with\r\n    @returns {string} A zero padded string\r\n*/\r\nString.prototype.pad = function(num, size) {\r\n\t//let s = num + '';\r\n\tlet s = String(num);\r\n\twhile (s.length < size) {\r\n\t\ts = '0' + s;\r\n\t}\r\n\treturn s;\r\n};\r\n/**\r\n    Returns a Javascript date object from a .NET JavaScriptSerializer date\r\n    See https://stackoverflow.com/a/50292370/722785\r\n    param {string} dateString from .NET Serializer ie: Date(1534759609990)\r\n    @returns {Date} Javascript Date Object\r\n*/\r\nString.prototype.getDateValue = function() {\r\n\treturn new Date(parseInt(this.replace(/\\D+/gu, '')));\r\n};\r\n/**\r\n    Create a globally unique identifier\r\n    @returns {String} Globally unique identifier\r\n*/\r\nString.prototype.guid = function() {\r\n\tconst s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n\treturn `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4() + s4() + s4()}`;\r\n};"]}