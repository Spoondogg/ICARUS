{"version":3,"sources":["icarus/controller/TOKEN.js"],"names":["EL","ATTRIBUTES","MODEL","TokenError","TOKEN","[object Object]","node","super","getToken","value","token","document","getElementsByName","console","log","getElementsByTagName","content","e","message","this","parentNode","removeChild","warn"],"mappings":"OAGOA,IAAMC,WAAYC,UAAa,2BAC/BC,eAAgB,wCAOR,MAAMC,cAAcJ,GAKlCK,YAAYC,GACXC,MAAMD,EAAM,QAAS,IAAIJ,MAAM,IAAID,WAAW,GAAI,6BAA8B,SAAUG,MAAMI,WAAWC,SAQ5GJ,kBACC,IACC,IAAIK,EAAQC,SAASC,kBAAkB,8BAGvC,OAFAC,QAAQC,IAAI,cAAeJ,GAC3BC,SAASI,qBAAqB,QAAQL,MAAMM,QAAUN,EAAM,GAAGD,MACxDC,EACN,MAAOO,GACR,MAAM,IAAId,WAAW,sCAAuCc,EAAEC,UAQhEb,4BACC,IAAIK,EAAQS,KAAKX,WACjB,IAEC,OADAE,EAAMU,WAAWC,YAAYX,IACtB,EACN,MAAOO,GAER,MADAJ,QAAQS,KAAK,oCACPL","file":"TOKEN.js","sourcesContent":["/**\r\n    @module\r\n*/\r\nimport EL, { ATTRIBUTES, MODEL } from '../model/el/EL.js';\r\nimport TokenError from '../error/TokenError.js';\r\n/**\r\n    A Token to prevent Cross Site Request Forgery (CSRF)\r\n    @class\r\n    @extends EL\r\n    @see csrf https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\r\n*/\r\nexport default class TOKEN extends EL {\r\n\t/**\r\n\t    Constructs an INPUT element that represents the Anti Forgery Token\r\n\t    @param {EL} node The parent object\r\n\t */\r\n\tconstructor(node) {\r\n\t\tsuper(node, 'INPUT', new MODEL(new ATTRIBUTES('', '__RequestVerificationToken', 'HIDDEN', TOKEN.getToken().value)));\r\n\t}\r\n\t/**\r\n\t\t    Generates a Request Verification Token element if \r\n\t\t    one exists in the DOM. (Usually a hidden input)\r\n\t        The token value is appended to the current document's metatags\r\n\t\t    @returns {HTMLElement} An input element\r\n\t\t*/\r\n\tstatic getToken() {\r\n\t\ttry {\r\n\t\t\tlet token = document.getElementsByName('__RequestVerificationToken');\r\n\t\t\tconsole.log('Token.value', token);\r\n\t\t\tdocument.getElementsByTagName('meta').token.content = token[0].value;\r\n\t\t\treturn token;\r\n\t\t} catch (e) {\r\n\t\t\tthrow new TokenError('Unable to retrieve or set the token', e.message);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t\t    Remove the Request Verification Token HTML Input from the DOM\r\n\t        @returns {boolean} Returns true if the token was removed\r\n\t        @throws Throw an error if token input element cannot be removed from the DOM\r\n\t\t*/\r\n\tstatic removeTokenFromDom() {\r\n\t\tlet token = this.getToken();\r\n\t\ttry {\r\n\t\t\ttoken.parentNode.removeChild(token);\r\n\t\t\treturn true;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('Failed to remove TOKEN from BODY');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n}"]}