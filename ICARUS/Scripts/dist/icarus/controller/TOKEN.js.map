{"version":3,"sources":["controller/TOKEN.js"],"names":["EL","ATTRIBUTES","MODEL","TokenError","TOKEN","[object Object]","node","super","setToken","value","token","document","getElementsByName","parentNode","removeChild","console","log","getElementsByTagName","content","e","message","warn"],"mappings":"OACOA,IAAMC,WAAYC,UAAa,2BAC/BC,eAAgB,wCAMR,MAAMC,cAAcJ,GAIlCK,YAAYC,GACXC,MAAMD,EAAM,QAAS,IAAIJ,MAAM,IAAID,WAAW,GAAI,6BAA8B,SAAUG,MAAMI,WAAWC,SAO5GJ,kBACC,IACU,IAAIK,EAAQC,SAASC,kBAAkB,8BAA8B,GAK9E,OAJSF,EAAMG,WAAWC,YAAYJ,GACtCK,QAAQC,IAAI,cAAeN,GAClBC,SAASM,qBAAqB,QAAQP,MAAMQ,QAAUR,EAAMD,MAE9DC,EACN,MAAOS,GACR,MAAM,IAAIhB,WAAW,sCAAuCgB,EAAEC,UAQhEf,mBAAmBK,GAClB,IAEC,OADAA,EAAMG,WAAWC,YAAYJ,IACtB,EACN,MAAOS,GACRJ,QAAQM,KAAK","file":"TOKEN.js","sourcesContent":["/** @module */\r\nimport EL, { ATTRIBUTES, MODEL } from '../model/el/EL.js';\r\nimport TokenError from '../error/TokenError.js';\r\n/** A Token to prevent Cross Site Request Forgery (CSRF)\r\n    @class\r\n    @extends EL\r\n    @see csrf https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\r\n*/\r\nexport default class TOKEN extends EL {\r\n\t/** Constructs an INPUT element that represents the Anti Forgery Token\r\n\t    @param {EL} node The parent object\r\n\t */\r\n\tconstructor(node) {\r\n\t\tsuper(node, 'INPUT', new MODEL(new ATTRIBUTES('', '__RequestVerificationToken', 'HIDDEN', TOKEN.setToken().value)));\r\n\t}\r\n\t/** Generates a Request Verification Token element if \r\n\t\tone exists in the DOM. (Usually a hidden input)\r\n\t    The token value is appended to the current document's metatags\r\n\t\t@returns {HTMLElement} An input element\r\n\t*/\r\n\tstatic setToken() {\r\n\t\ttry {\r\n            let token = document.getElementsByName('__RequestVerificationToken')[0];\r\n            token.parentNode.removeChild(token);\r\n\t\t\tconsole.log('Token.value', token);\r\n            document.getElementsByTagName('meta').token.content = token.value;\r\n            //this.removeTokenFromDom(token);\r\n\t\t\treturn token;\r\n\t\t} catch (e) {\r\n\t\t\tthrow new TokenError('Unable to retrieve or set the token', e.message);\r\n\t\t}\r\n\t}\r\n\t/** Remove the Request Verification Token HTML Input from the DOM\r\n        @param {Element} token The request verification token element\r\n\t    @returns {boolean} Returns true if the token was removed\r\n\t    @throws Throw an error if token input element cannot be removed from the DOM\r\n\t*/\r\n\tremoveTokenFromDom(token) {\r\n\t\ttry {\r\n\t\t\ttoken.parentNode.removeChild(token);\r\n\t\t\treturn true;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('Failed to remove TOKEN from BODY');\r\n\t\t\t//throw e;\r\n\t\t}\r\n\t}\r\n}"]}