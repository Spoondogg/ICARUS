{"version":3,"sources":["model/MODEL.js"],"names":["ATTRIBUTES","MODEL","[object Object]","attributes","data","description","this","key","value","e","console","log","prop"],"mappings":"OAGOA,eAAgB,iCAOR,MAAMC,MAQpBC,YAAYC,EAAYC,EAAMC,GAC7BC,KAAKH,WAAmC,iBAAfA,EAA0B,IAAIH,WAAWG,GAAcA,GAAc,IAAIH,WAClGM,KAAKF,KAAOA,GAAQ,IAAIJ,WACxBM,KAAKD,YAAcA,GAAe,IAAIL,WAQvCE,IAAIK,EAAKC,GACR,GAAmB,iBAARD,EACV,IAEC,OADAD,KAAKC,QAAwB,IAAVC,EAAwBD,EAAMC,EAC1CF,KACN,MAAOG,GAER,MADAC,QAAQC,IAAI,wCACNF,EAGR,IAAK,IAAIG,KAAQL,EACI,iBAATK,IACVN,KAAKM,GAAQL,EAAIK,IAGnB,OAAON,KAORJ,IAAIK,GACH,IACC,OAAOD,KAAKC,GACX,MAAOE,GACRC,QAAQC,IAAI,2BAA6BJ,EAAM,mBAAoBE,YAI7DT","file":"MODEL.js","sourcesContent":["/**\r\n    @module\r\n*/\r\nimport ATTRIBUTES from './ATTRIBUTES.js';\r\n/**\r\n    A Map like data structure\r\n    @todo Consider just extending Map()\r\n    @see https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373\r\n    @class\r\n*/\r\nexport default class MODEL {\r\n\t/**\r\n\t\t    Constructs a generic MODEL\r\n\t\t    @param {ATTRIBUTES} attributes A collection of attributes\r\n\t\t    @param {ATTRIBUTES} data A collection of data attributes\r\n\t\t    @param {ATTRIBUTES} description A collection of description attributes\r\n\t        @todo Consider renaming description to meta\r\n\t\t*/\r\n\tconstructor(attributes, data, description) {\r\n\t\tthis.attributes = typeof attributes === 'string' ? new ATTRIBUTES(attributes) : attributes || new ATTRIBUTES();\r\n\t\tthis.data = data || new ATTRIBUTES();\r\n\t\tthis.description = description || new ATTRIBUTES();\r\n\t}\r\n\t/**\r\n\t    Sets a property (or a collection of properties) for this MODEL\r\n\t    @param {string} key Name of property || An object containing key/value pairs\r\n\t    @param {any} value Value for property\r\n\t    @returns {MODEL} The object MODEL\r\n\t*/\r\n\tset(key, value) {\r\n\t\tif (typeof key === 'string') {\r\n\t\t\ttry {\r\n\t\t\t\tthis[key] = typeof value === 'undefined' ? key : value;\r\n\t\t\t\treturn this;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log('Unable to set property of this MODEL');\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let prop in key) {\r\n\t\t\tif (typeof prop === 'string') {\r\n\t\t\t\tthis[prop] = key[prop];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t    Gets a property from this MODEL\r\n\t    @param {string} key Name of property\r\n\t    @returns {any} The value of the given key\r\n\t*/\r\n\tget(key) {\r\n\t\ttry {\r\n\t\t\treturn this[key];\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('Unable to get property \"' + key + '\" of this MODEL.', e);\r\n\t\t}\r\n\t}\r\n}\r\nexport { ATTRIBUTES };"]}