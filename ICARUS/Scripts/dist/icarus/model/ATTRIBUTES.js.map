{"version":3,"sources":["model/ATTRIBUTES.js"],"names":["ATTRIBUTES","[object Object]","className","name","type","value","this","set","attr","console","warn","key","e"],"mappings":"eASe,MAAMA,WAUpBC,YAAYC,EAAWC,EAAMC,EAAMC,GAElC,cAAeH,GACd,IAAK,SACJI,KAAKC,IAAI,QAASL,GAClBI,KAAKC,IAAI,OAAQJ,GACjBG,KAAKC,IAAI,OAAQH,GACjBE,KAAKC,IAAI,QAASF,GAClB,MACD,IAAK,SACJ,IAAK,IAAIG,KAAQN,EACI,iBAATM,EACVF,KAAKC,IAAIC,EAAMN,EAAUM,IAEzBC,QAAQC,KAAK,0BAA2BF,IAgB7CP,IAAIU,GACH,IACC,OAAOL,KAAKK,GACX,MAAOC,GAER,OADAH,QAAQC,KAAK,gCAAkCC,EAAM,IAAKC,GACnD,MASTX,IAAIU,EAAKN,GAIR,OAHI,MAAOA,IACVC,KAAKK,GAAON,GAAS,IAEfC","file":"ATTRIBUTES.js","sourcesContent":["/**\r\n    @module\r\n*/\r\n/**\r\n    A generic set of ATTRIBUTES for an EL\r\n    @class\r\n    @todo Consider just extending Map()\r\n    @see https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373\r\n */\r\nexport default class ATTRIBUTES { // extends Map \r\n\t/**\r\n\t    If the 'className' argument is an object, break it out into individual attributes\r\n\t    Otherwise, map to className, name, type and value\r\n\r\n\t    @param {object} className A collection of attributes || className Element class attribute\r\n\t    @param {string} name Optional Element name attribute\r\n\t    @param {string} type Element type attribute\r\n\t    @param {string} value Element value attribute\r\n\t */\r\n\tconstructor(className, name, type, value) {\r\n\t\t//super();\r\n\t\tswitch (typeof className) {\r\n\t\t\tcase 'string':\r\n\t\t\t\tthis.set('class', className);\r\n\t\t\t\tthis.set('name', name);\r\n\t\t\t\tthis.set('type', type);\r\n\t\t\t\tthis.set('value', value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'object':\r\n\t\t\t\tfor (let attr in className) {\r\n\t\t\t\t\tif (typeof attr === 'string') {\r\n\t\t\t\t\t\tthis.set(attr, className[attr]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.warn('Unable to set attribute', attr);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'undefined':\r\n\t\t\tdefault:\r\n\t\t\t\t//break;\r\n\t\t\t\t//default:\r\n\t\t\t\t//console.warn('Unrecognized classname', className);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Gets the specified attribute\r\n\t    @param {string} key Attribute key\r\n\t    @returns {object} Attribute Object\r\n\t */\r\n\tget(key) {\r\n\t\ttry {\r\n\t\t\treturn this[key];\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('No attribute exists for key \"' + key + '\"', e);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Sets the given key to the specified value\r\n\t    @param {string} key Attribute name\r\n\t    @param {any} value Attribute value\r\n\t    @returns {ATTRIBUTES} This attributes Object \r\n\t */\r\n\tset(key, value) {\r\n\t\tif (typeof value !== 'undefined' && value !== null) {\r\n\t\t\tthis[key] = value || '';\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}"]}