{"version":3,"sources":["model/EL/container/CONTAINER.js"],"names":["GROUP","ATTRIBUTES","EL","MODEL","AbstractMethodError","CONTAINERBODY","DATAELEMENTS","DATEOBJECT","DIALOG","DIV","FOOTER","HEADER","ICONS","INPUTTYPES","NAVBAR","STATUS","STRING","CONTAINER","[object Object]","node","element","model","set","name","label","shared","containerList","super","this","addClass","dataElements","className","attrElements","updateUrl","subsections","split","navBar","createDraggableNavBar","body","addNavBarDefaults","addDefaultContainers","setDefaultVisibility","construct","container","console","log","noPrompt","expand","dataId","data","collapsed","collapse","showNavBar","splice","c","length","addContainerCase","el","setAttribute","ondragstart","ev","id","dataTransfer","setData","ondrop","preventDefault","$","document","getElementById","getData","insertBefore","ondragover","ondragend","value","text","html","prev","animate","height","setTimeout","insertAfter","delay","next","pane","empty","populate","children","domGroup","header","menu","getGroup","addNavItemIcon","anchor","icon","UP","onclick","moveContainerUp","bind","DOWN","moveContainerDown","REFRESH","refresh","DELETE","remove","EXCLAMATION","disable","crudGroup","LOAD","load","addDomItems","addCrudItems","btnSave","SAVE","createWrappedSaveForm","btnQuickSave","quickSave","toggleCollapse","moveUp","moveDown","toggle","hasClass","wrapper","save","wrp","nextElementSibling","parentNode","removeChild","e","url","type","formPost","ajax","async","success","result","Promise","resolve","reject","create","Error","then","err","addButton","getMainContainer","addCase","getFactory","get","ee","warn","addConstructElementButton","status","OPEN","open","btnLock","UNLOCK","options","removeAttribute","getId","CLOSED","close","s","LOCK","removeClass","getAttribute","attributes","parseInt","isNaN","push","getProtoTypeByClass","prompt","caller","getLabel","tab","setInnerHTML","find","token","getToken","show","payload","URL","window","location","href","returnUrl","searchParams","origin","reload","getDateObject","dateCreated","getDateValue"],"mappings":"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","file":"CONTAINER.js","sourcesContent":["/* eslint-disable max-lines */\r\n/** @module */\r\nimport GROUP, { ATTRIBUTES, EL, MODEL } from '../group/GROUP.js';\r\nimport AbstractMethodError from '../../../error/AbstractMethodError.js';\r\nimport CONTAINERBODY from './CONTAINERBODY.js';\r\nimport { DATAELEMENTS } from '../../../enums/DATAELEMENTS.js';\r\nimport DATEOBJECT from '../../../helper/DATEOBJECT.js';\r\nimport DIALOG from '../dialog/DIALOG.js';\r\nimport DIV from '../div/DIV.js';\r\nimport FOOTER from '../footer/FOOTER.js';\r\nimport HEADER from '../header/HEADER.js';\r\nimport { ICONS } from '../../../enums/ICONS.js';\r\nimport { INPUTTYPES } from '../../../enums/INPUTTYPES.js';\r\nimport NAVBAR from '../nav/navbar/NAVBAR.js';\r\nimport { STATUS } from '../../../enums/STATUS.js';\r\nimport STRING from '../../../STRING.js';\r\n/** An abstract Container element with NAVBAR\r\n    @description A container can be expanded or hidden and have elements added to itself\r\n    @class\r\n    @extends GROUP\r\n*/\r\nexport default class CONTAINER extends GROUP {\r\n\t/** @constructs CONTAINER\r\n\t    @param {EL} node The element to contain the section\r\n\t    @param {string} element HTML element\r\n\t    @param {MODEL} model The CONTAINER object retrieved from the server\r\n\t    @param {Array<string>} containerList An array of strings representing child Containers that this Container can create\r\n\t */\r\n\tconstructor(node, element, model = new MODEL().set({\r\n\t\telement, \r\n\t\t'name': element || '',\r\n\t\t'label': element,\r\n\t\t'shared': 1\r\n\t}), containerList = []) {\r\n\t\tsuper(node, element, model); //console.log('CONTAINER{' + this.className + '}');\r\n\t\tthis.addClass('icarus-container'); //this.isContainer = 1;\r\n\t\tthis.dataElements = DATAELEMENTS[this.className];\r\n\t\tthis.attrElements = [];\r\n\t\t/*if (model.id) { // Eventually, this needs to go\r\n\t\t\tthis.el.setAttribute('id', model.id);\r\n\t\t}*/\r\n\t\tthis.shared = this.shared || 1; //this.shared = this.shared ? this.shared : 1; \r\n\t\tthis.updateUrl = this.element + '/Set'; // model.className should be the actual value, no?                \r\n\t\tthis.subsections = model.subsections ? model.subsections.split(',') : '0'; // Delimited list of child ids\r\n\t\tthis.navBar = this.createDraggableNavBar();\r\n\t\tthis.body = new CONTAINERBODY(this, model);\r\n\t\tthis.addNavBarDefaults();\r\n\t\tthis.addDefaultContainers(containerList);\r\n\t\tthis.setDefaultVisibility(model);\r\n\t\t//if (this.className !== 'CONTAINER') {\r\n\t\tthis.construct();\r\n\t\t//}\r\n\t}\r\n\t/** \r\n\t\tAbstract construct method throws an error if not declared \r\n\t\t@abstract\r\n\t    @returns {void}\r\n\t*/\r\n\tconstruct() {\r\n\t\tif (this.className !== 'CONTAINER') {\r\n\t\t\tthrow new AbstractMethodError('CONTAINER{' + this.className + '} : Abstract method ' + this.className + '.construct() not implemented.');\r\n\t\t}\r\n\t}\r\n\t/** Saves the state of the given Container\r\n        @description Generates an empty form, populates with current state and posts to appropriate setter\r\n\t    @param {EL} node The parent container to hold the save menu\r\n        @param {CONTAINER} container The Container to save\r\n        @todo Rearrange signature to (container, node) and consider defaulting to a hidden? modal\r\n        @abstract\r\n\t    @returns {void}\r\n\t*/\r\n\tsave(node, container = this) {\r\n\t\tconsole.log(node, container);\r\n\t\tthrow new AbstractMethodError('CONTAINER{' + this.className + '} : Abstract method ' + this.className + '.construct() not implemented.');\r\n\t}\r\n\t/** Displays a prompt that performs a save of the container, it's \r\n\t    attributes and any data objects associated with it.\r\n        @param {CONTAINER} container The Container to save\r\n\t    @param {BOOLEAN} noPrompt If false (default), no prompt is displayed\r\n        @abstract\r\n\t    @returns {BOOLEAN} True if successful\r\n\t */\r\n\tquickSave(container, noPrompt = false) {\r\n\t\tconsole.log(container, noPrompt);\r\n\t\tthrow new AbstractMethodError('CONTAINER{' + this.className + '} : Abstract method ' + this.className + '.construct() not implemented.');\r\n\t}\r\n\t/** The default visibility state for menus and collapseable content\r\n\t    @param {MODEL} model The CONTAINER object retrieved from the server\r\n\t    @returns {void}\r\n\t*/\r\n\tsetDefaultVisibility(model) {\r\n\t\tthis.expand(); // Collapse or Expand Body Pane\r\n\t\tif (model.dataId > 0) {\r\n\t\t\tif (model.data.collapsed) {\r\n\t\t\t\tthis.collapse();\r\n\t\t\t}\r\n\t\t\tif (model.data.showNavBar) {\r\n\t\t\t\tthis.showNavBar();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** Adds the default Container Cases to the CRUD Menu\r\n\t    @param {Array} containerList An array of container class names\r\n\t    @returns {void}\r\n\t*/\r\n\taddDefaultContainers(containerList) {\r\n\t\tlet defaultContainers = ['IFRAME', 'FORM', 'LIST', 'MENULIST', 'JUMBOTRON', 'BANNER', 'PARAGRAPH', 'CHAT'];\r\n\t\tcontainerList.splice(2, 0, ...defaultContainers);\r\n\t\tfor (let c = 0; c < containerList.length; c++) {\r\n\t\t\tthis.addContainerCase(containerList[c]);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Drag containers by their NavBars\r\n\t    @see https://www.w3schools.com/jsref/event_ondrag.asp\r\n\t    param {string} label The header text\r\n\t    @returns {NAVBAR} A draggable navbar\r\n\t*/\r\n\tcreateDraggableNavBar() {\r\n\t\tlet navBar = new NAVBAR(this, new MODEL().set({\r\n\t\t\t'label': this.label // model.label\r\n\t\t}));\r\n\t\tnavBar.el.setAttribute('draggable', true);\r\n\t\tnavBar.el.ondragstart = (ev) => {\r\n\t\t\tconsole.log('Dragging Container: ' + this.className + '(' + this.id + ') ' + this.label);\r\n\t\t\tthis.collapse();\r\n\t\t\tev.dataTransfer.setData(\"Container\", this.id);\r\n\t\t};\r\n\t\t// Drop the Container\r\n\t\tnavBar.el.ondrop = (ev) => {\r\n\t\t\tconsole.log('Dropping onto Container: ' + this.className + '(' + this.id + ')');\r\n\t\t\tev.preventDefault();\r\n\t\t\tlet container = $(document.getElementById(ev.dataTransfer.getData(\"Container\")));\r\n\t\t\tcontainer.insertBefore(this.el);\r\n\t\t\tcontainer.collapse('show');\r\n\t\t\t/*\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t    console.log('QuickSaving drop recipient parent ' + this.className + '(' + this.id + ')');\r\n\t\t\t    this.getProtoTypeByClass('CONTAINER').quickSave(false); // QuickSave Parent\r\n\t\t\t}.bind(this), 500);\r\n\t\t\t*/\r\n\t\t\t//console.log('You should save your changes');\r\n\t\t};\r\n\t\t// Allow drop on this Container\r\n\t\tnavBar.el.ondragover = (ev) => {\r\n\t\t\t//console.log('Dragging over ' + this.className + '(' + this.id + ')');\r\n\t\t\tev.preventDefault();\r\n\t\t};\r\n\t\tnavBar.el.ondragend = () => { //this.navBar.el.ondragend = (ev) => {\r\n\t\t\t// Drag Ending\r\n\t\t};\r\n\t\treturn navBar;\r\n\t}\r\n\t/**\r\n\t    HTML Encode the given value.\r\n\t    Create a in-memory div, set it's inner text(which jQuery automatically encodes\r\n\t    then grab the encoded contents back out.  The div never exists on the page.\r\n\t    @todo This really should just be an extention of the String class\r\n\t    @param {string} value The string to be html encoded\r\n\t    @returns {text} An html encoded string\r\n\t */\r\n\thtmlEncode(value) {\r\n\t\treturn $('<div/>').text(value).html();\r\n\t}\r\n\t/**\r\n\t    Decodes an HTML encoded value back into HTML string\r\n\t    @todo This really should just be an extention of the String class\r\n\t    @param {string} value An html encoded string\r\n\t    @returns {string} A string that was previously html encoded\r\n\t */\r\n\thtmlDecode(value) {\r\n\t\treturn $('<div/>').html(value).text();\r\n\t}\r\n\t/**\r\n\t    Moves this element UP one slot\r\n\t    @returns {ThisType} This Container\r\n\t*/\r\n\tmoveUp() {\r\n\t\tconsole.log('Move Up');\r\n\t\tlet node = $(this.el);\r\n\t\tif (node.prev().length > 0) {\r\n\t\t\tnode.animate({ height: 'toggle' }, 300);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tnode.prev().animate({ height: 'toggle' }, 300).insertAfter(node).animate({ height: 'toggle' }, 300);\r\n\t\t\t}, 0);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tnode.animate({ height: 'toggle' }, 300).delay(300);\r\n\t\t\t}, 300);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t    Moves this element DOWN one slot\r\n\t    @returns {ThisType} This Container\r\n\t*/\r\n\tmoveDown() {\r\n\t\tconsole.log('Move Down');\r\n\t\tlet node = $(this.el);\r\n\t\tif (node.next().length > 0) {\r\n\t\t\tnode.animate({ height: 'toggle' }, 300);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tnode.next().animate({ height: 'toggle' }, 300).insertBefore(node).animate({ height: 'toggle' }, 300).delay(300);\r\n\t\t\t}, 0);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tnode.animate({ height: 'toggle' }, 300);\r\n\t\t\t}, 300);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t\t    Empties the Container Pane and reconstructs its contents \r\n\t\t    based on the current model\r\n\t        @returns {void}\r\n\t\t*/\r\n\trefresh() {\r\n\t\tconsole.log(0, 'Refreshing CONTAINER{' + this.className + '}[' + this.id + ']');\r\n\t\tthis.body.pane.empty();\r\n\t\tthis.construct();\r\n\t\tthis.populate(this.body.pane.children);\r\n\t}\r\n\t/**\r\n\t\t    Shows the Container NavBar\r\n\t        @returns {void}\r\n\t\t*/\r\n\tshowNavBar() {\r\n\t\t$(this.navBar.el).collapse('show');\r\n\t}\r\n\t/**\r\n\t    Adds default items to the DOM Menu\r\n\t    @returns {GROUP} A Menu Group\r\n\t*/\r\n\taddDomItems() {\r\n\t\tlet domGroup = this.navBar.header.menu.getGroup('DOM');\r\n\t\tdomGroup.addNavItemIcon(new MODEL().set({\r\n\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t'icon': ICONS.UP,\r\n\t\t\t\t'label': 'UP'\r\n\t\t\t})\r\n\t\t})).el.onclick = this.moveContainerUp.bind(this);\r\n\t\tdomGroup.addNavItemIcon(new MODEL().set({\r\n\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t'icon': ICONS.DOWN,\r\n\t\t\t\t'label': 'DOWN'\r\n\t\t\t})\r\n\t\t})).el.onclick = this.moveContainerDown.bind(this);\r\n\t\tdomGroup.addNavItemIcon(new MODEL().set({\r\n\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t'icon': ICONS.REFRESH,\r\n\t\t\t\t'label': 'REFRESH'\r\n\t\t\t})\r\n\t\t})).el.onclick = this.refresh.bind(this);\r\n\t\tdomGroup.addNavItemIcon(new MODEL().set({\r\n\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t'icon': ICONS.DELETE,\r\n\t\t\t\t'label': 'REMOVE'\r\n\t\t\t})\r\n\t\t})).el.onclick = this.remove.bind(this);\r\n\t\tdomGroup.addNavItemIcon(new MODEL().set({\r\n\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t'icon': ICONS.EXCLAMATION,\r\n\t\t\t\t'label': 'DELETE'\r\n\t\t\t})\r\n\t\t})).el.onclick = this.disable.bind(this);\r\n\t\treturn domGroup;\r\n\t}\r\n\t/**\r\n\t    Adds the CRUD Nav Items\r\n        @returns {GROUP} A Menu Group\r\n\t*/\r\n\taddCrudItems() {\r\n\t\tlet crudGroup = this.navBar.header.menu.getGroup('CRUD');\r\n\t\tcrudGroup.addNavItemIcon(new MODEL().set({\r\n\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t'icon': ICONS.LOAD,\r\n\t\t\t\t'label': 'LOAD'\r\n\t\t\t})\r\n\t\t})).el.onclick = this.load.bind(this);\r\n\t\treturn crudGroup;\r\n\t}\r\n\t/**\r\n\t\t    Adds default DOM, CRUD and ELEMENT Nav Items to the Option Menu\r\n\t        @returns {void}\r\n\t\t */\r\n\taddNavBarDefaults() {\r\n\t\tif (this.navBar.header.menu) {\r\n\t\t\t//let domGroup = this.addDomItems();\r\n\t\t\tthis.addDomItems();\r\n\t\t\tlet crudGroup = this.addCrudItems();\r\n\t\t\t// Add items to Options Dropdown Tab\r\n\t\t\tthis.btnSave = crudGroup.addNavItemIcon(new MODEL().set({\r\n\t\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t\t'icon': ICONS.SAVE,\r\n\t\t\t\t\t'label': 'SAVE'\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t\tthis.btnSave.el.onclick = this.createWrappedSaveForm.bind(this);\r\n\t\t\tthis.btnQuickSave = crudGroup.addNavItemIcon(new MODEL().set({\r\n\t\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t\t'icon': ICONS.SAVE,\r\n\t\t\t\t\t'label': 'QUICKSAVE'\r\n\t\t\t\t})\r\n\t\t\t}));\r\n\t\t\tthis.btnQuickSave.el.onclick = this.quickSave.bind(this);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t\tMoves the Container up one slot in the DOM\r\n\t    @returns {void}\r\n\t*/\r\n\tmoveContainerUp() {\r\n\t\tthis.navBar.header.toggleCollapse();\r\n\t\tthis.moveUp();\r\n\t}\r\n\t/**\r\n\t\tMoves the Container down one slot in the DOM\r\n\t    @returns {void}\r\n\t*/\r\n\tmoveContainerDown() {\r\n\t\tthis.navBar.header.toggleCollapse();\r\n\t\tthis.moveDown();\r\n\t}\r\n\t/**\r\n\t\tCreates a save form for this Container and places it in a wrapper\r\n\t\tinside the CRUD Group\r\n\t    @returns {void}\r\n\t*/\r\n\tcreateWrappedSaveForm() {\r\n\t\tthis.btnSave.toggle('active');\r\n\t\tif ($(this.btnSave.el).hasClass('active')) {\r\n\t\t\tlet node = this.navBar.header.menu.getGroup('CRUD').wrapper;\r\n\t\t\tthis.btnSave.wrapper = new DIV(node, new MODEL(new ATTRIBUTES('collapse in wrapper')));\r\n\t\t\tthis.save(this.btnSave.wrapper, this);\r\n\t\t} else {\r\n\t\t\tconsole.log(0, 'Closing ' + this.className + '.save() form.');\r\n\t\t\tlet wrp = this.navBar.header.menu.getGroup('CRUD').el.nextElementSibling;\r\n\t\t\ttry {\r\n\t\t\t\t$(wrp).collapse('toggle');\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\twrp.parentNode.removeChild(wrp);\r\n\t\t\t\t}, 2000);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log('Unable to destroy this', e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Performs JQuery's ajax method to the given url.\r\n\t    @param {string} url Target url\r\n\t    @param {string} type HTTP Method (GET,PUT,POST,DELETE)\r\n\t    @param {FormPost} formPost Data to be sent to the server\r\n\t    param {function} success Function to be called on success\r\n\t    @returns {{}} payload\r\n\t*/\r\n\tajax(url, type, formPost) { // success\r\n\t\treturn $.ajax({\r\n\t\t\turl,\r\n\t\t\ttype, //ie: POST\r\n\t\t\tasync: true,\r\n\t\t\tdata: formPost,\r\n\t\t\tsuccess: (result) => result\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t\t    Adds the Construct 'element' button to the options menu\r\n\t\t    @param {string} className Element constructor class name\r\n\t        @returns {void}\r\n\t\t*/\r\n\taddConstructElementButton(className) {\r\n\t\tif (this.navBar.header.menu) {\r\n\t\t\tthis.navBar.header.menu.getGroup('ELEMENTS').addNavItemIcon(new MODEL().set({\r\n\t\t\t\t\t'anchor': new MODEL().set({\r\n\t\t\t\t\t\t'icon': ICONS[className],\r\n\t\t\t\t\t\t'label': className //'Create ^'\r\n\t\t\t\t\t})\r\n\t\t\t\t})).el.onclick =\r\n\t\t\t\t/**\r\n\t\t\t\t\tMakes a Promise to perform Container.create() with the\r\n\t\t\t\t\tresponse (MODEL) and performs a QuickSave on the parent Container\r\n\t\t\t\t    @see https://scotch.io/tutorials/javascript-promises-for-dummies\r\n\t\t\t\t    @see https://developers.google.com/web/fundamentals/primers/promises\r\n\t\t\t\t*/\r\n\t\t\t\t() => {\r\n\t\t\t\t\tthis.navBar.header.toggleCollapse();\r\n\t\t\t\t\tlet promise = new Promise((resolve, reject) => {\r\n\t\t\t\t\t\tconsole.log('Promise');\r\n\t\t\t\t\t\t// do a thing, possibly async, then…\r\n\t\t\t\t\t\tlet result = this.create(new MODEL().set({\r\n\t\t\t\t\t\t\tclassName\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t\tconsole.log('Promise', result);\r\n\t\t\t\t\t\tif (result === null) {\r\n\t\t\t\t\t\t\treject(Error('Failed to create element'));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresolve(result); // Successfully created Element\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tpromise.then((result) => {\r\n\t\t\t\t\t\tconsole.log('promise success', result);\r\n\t\t\t\t\t\tthis.quickSave(true);\r\n\t\t\t\t\t}, (err) => {\r\n\t\t\t\t\t\tconsole.log('promise fail', err); // Error: \"It broke\"\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t\t    Performs addCase() for the given Element within a \r\n\t\t    Container of an element that extends Container\r\n\r\n\t\t    Sets the constructor callback for this element\r\n\t\t    and adds respective button to this container\r\n\r\n\t\t    @param {string} className ie SECTION or FORM\r\n\t\t    @param {boolean} addButton If false, no button is created\r\n\r\n\t        @returns {void}\r\n\t\t*/\r\n\taddContainerCase(className, addButton = true) {\r\n\t\ttry {\r\n\t\t\tif (typeof this.getMainContainer() !== 'undefined') {\r\n\t\t\t\tthis.addCase(className, function(model) {\r\n\t\t\t\t\tconsole.log(this.className + ': CALLING CASE: ' + className);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\treturn this.getMainContainer().getFactory().get(this.body.pane, className, model.id || 0);\r\n\t\t\t\t\t} catch (ee) {\r\n\t\t\t\t\t\tconsole.warn('Unable to retrieve factory for Container Case', ee);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.bind(this)); // CONTAINERFACTORY\r\n\t\t\t\tif (addButton) {\r\n\t\t\t\t\tthis.addConstructElementButton(className);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn(this.className + ': Unable to add Container Case', e);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t\t    Overrides EL.open();\r\n\t\t    Opens the CONTAINER up for editing.  This should create a link\r\n\t\t    between the object on the server and its client side representation\r\n\t        @returns {void}\r\n\t\t*/\r\n\topen() {\r\n\t\ttry {\r\n\t\t\tthis.status = STATUS.OPEN;\r\n\t\t\tsuper.open();\r\n\t\t\tthis.el.setAttribute('data-status', 'open');\r\n\t\t\tthis.header.btnLock.icon.el.className = ICONS.UNLOCK;\r\n\t\t\tthis.header.options.el.removeAttribute('disabled');\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('Unable to open parent.', e);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t\t    Closes the CONTAINER up for editing.  This should create a link\r\n\t\t    between the object on the server and its client side representation\r\n\t\t    and update accordingly\r\n\t        @returns {void}\r\n\t\t*/\r\n\tclose() {\r\n\t\tconsole.log('Locking ' + this.element + '(' + this.getId() + ')');\r\n\t\tthis.status = STATUS.CLOSED;\r\n\t\tthis.node.close();\r\n\t\tthis.el.setAttribute('data-status', 'closed');\r\n\t\t// If section is open and we are trying to lock, we must first lock the children\r\n\t\tconsole.log(this.element + ' has ' + this.children.length + ' child(ren)');\r\n\t\tfor (let s = 0; s < this.children.length; s++) {\r\n\t\t\tif (this.children[s].status === STATUS.OPEN) {\r\n\t\t\t\tthis.children[s].close();\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log('Children are closed. Closing ' + this.element + '(' + this.getId() + ')');\r\n\t\tthis.header.btnLock.icon.el.className = ICONS.LOCK;\r\n\t\t$(this.header.btnLock.el).removeClass('active');\r\n\t\tthis.header.options.el.setAttribute('disabled', 'disabled');\r\n\t\tconsole.log('Locked');\r\n\t}\r\n\t/**\r\n\t    Returns the CONTAINER's name attribute\r\n\t    @returns {string} Container name\r\n\t*/\r\n\tgetId() {\r\n\t\treturn this.el.getAttribute('id');\r\n\t}\r\n\t/**\r\n\t    Sets the CONTAINER's ID\r\n\t    @param {number} id Container database Id\r\n\t    @returns {void}\r\n\t*/\r\n\tsetId(id) {\r\n\t\tthis.id = id;\r\n\t\tthis.el.setAttribute('id', id);\r\n\t\tthis.data.id = id;\r\n\t\tthis.attributes.id = id;\r\n\t}\r\n\t/**\r\n\t    Returns the CONTAINER's name attribute\r\n\t    @returns {string} Container name\r\n\t*/\r\n\tgetName() {\r\n\t\treturn this.el.getAttribute('name');\r\n\t}\r\n\t/**\r\n\t    Sets the name of this element to the given value.\r\n\t    @param {string} name The name to be set\r\n\t    @returns {void}\r\n\t*/\r\n\tsetName(name) {\r\n\t\tthis.el.setAttribute('name', name);\r\n\t\tthis.model.name = name;\r\n\t}\r\n\t/**\r\n\t    Collapses the container's body\r\n\t    @returns {boolean} true if hidden\r\n\t    @returns {void}\r\n\t*/\r\n\tcollapse() {\r\n\t\ttry {\r\n\t\t\t$(this.body.el).collapse('hide');\r\n\t\t\treturn true;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t/**\r\n        Expands the container's body\r\n        @returns {void}\r\n    */\r\n\texpand() {\r\n\t\ttry {\r\n\t\t\t$(this.body.el).collapse('show');\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn(e);\r\n\t\t}\r\n\t}\r\n\t/**\r\n        Toggles the collapsed state of the container's body\r\n        @returns {void}\r\n    */\r\n\ttoggleBody() {\r\n\t\t$(this.body.el).collapse('toggle');\r\n\t}\r\n\t/**\r\n        An abstract load method for a CONTAINER\r\n        @abstract\r\n        @throws {AbstractMethodError} Throws an AbstractMethodError if no load method specified\r\n        @returns {void}\r\n    */\r\n\tload() {\r\n\t\tthrow new AbstractMethodError('CONTAINER{' + this.className + '}.load() : Abstract method ' + this.className + '.load() not implemented.');\r\n\t}\r\n\t/**\r\n\t     Generates an array of subsection Ids for this Container\r\n\t     @returns {array} A collection of subsection ids\r\n\t */\r\n\tgetSubSections() {\r\n\t\tlet id = null;\r\n\t\tlet subsections = [];\r\n\t\tfor (let c = 0; c < this.body.pane.el.children.length; c++) {\r\n\t\t\tid = parseInt(this.body.pane.el.children[c].id);\r\n\t\t\tif (!isNaN(id)) {\r\n\t\t\t\tsubsections.push(id);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn subsections;\r\n\t}\r\n\t/**\r\n\t    Returns the parent container for this container or null if it does not exist\r\n\t    @returns {CONTAINER} The parent container for this container\r\n\t*/\r\n\tgetContainer() {\r\n\t\treturn this.container;\r\n\t}\r\n\t/**\r\n\t    Returns the MAIN container\r\n\t    @returns {CONTAINER} The MAIN Container\r\n\t    @throws Will throw an error \r\n\t*/\r\n\tgetMainContainer() {\r\n\t\ttry {\r\n\t\t\treturn this.getProtoTypeByClass('MAIN');\r\n\t\t} catch (e) {\r\n\t\t\tswitch (this.getProtoTypeByClass('MODAL').className) {\r\n\t\t\t\tcase 'LOADER':\r\n\t\t\t\t\tconsole.warn('Modals exist in body.document and do not have a parent Container');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.log(this.className + ' does not have a parent Container.', this, this.getProtoTypeByClass('MODAL'));\r\n\t\t\t}\r\n\t\t\t//return null;\r\n\t\t\t//console.log('CONTAINER.getMainContainer() caught an error');\r\n\t\t\t//throw e;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Retrieves the application {@link PROMPT}\r\n\t    @returns {PROMPT} The application prompt\r\n\t    @throws Will throw an error if unable to retrieve the application prompt\r\n\t*/\r\n\tgetPrompt() {\r\n\t\ttry {\r\n\t\t\treturn this.getMainContainer().prompt;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('Unable to retrieve the application prompt');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Attempts to have the direct parent Container of this Container perform\r\n\t    a QuickSave\r\n\t    @returns {Boolean} Returns true if successful\r\n\t*/\r\n\tquickSaveParent() {\r\n\t\ttry {\r\n\t\t\treturn this.container.quickSave(false);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('Container.QuickSaveParent() No parent exists');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t\tActions performed after this container is saved\r\n\t\t@param {EL} node Parent node\r\n\t\t@param {EL} caller This\r\n\t    @returns {void}\r\n\t\t*/\r\n\tafterSuccessfulPost(node, caller) {\r\n\t\tconsole.log(100, 'Successful Post', node, caller);\r\n\t}\r\n\t/**\r\n\t    Returns the label for this section\r\n\t    @returns {string} The label\r\n\t*/\r\n\tgetLabel() {\r\n\t\treturn this.header.getLabel();\r\n\t}\r\n\t/**\r\n\t\tSets the label of this element to the given value.\r\n\t\t@param {string} label The name to be set\r\n\t    @returns {void}\r\n\t*/\r\n\tsetLabel(label) {\r\n\t\tthis.navBar.header.tab.anchor.setInnerHTML(label);\r\n\t\tthis.label = label;\r\n\t}\r\n\t/**\r\n\t\tSets the subsection array to the given value\r\n\t\t@param {array} subsections Sub Section UID array\r\n\t    @returns {void}\r\n\t*/\r\n\tsetSubSections(subsections) {\r\n\t\tthis.model.subsections = subsections;\r\n\t}\r\n\t/**\r\n        Toggles visibility of any child Container Headers\r\n        @returns {void}\r\n\t*/\r\n\ttoggleHeaders() {\r\n\t\t$(this.el).find('.icarus-container nav.navbar-nav').toggle();\r\n\t}\r\n\t/**\r\n        Updates the model\r\n        @param {any} payload Data returned by server\r\n        @returns {void}\r\n\t*/\r\n\t//updateModel() { //payload\r\n\t//console.log('updatemodel');\r\n\t//this.setName(payload.name);\r\n\t//this.setLabel(payload.label);\r\n\t//this.setSubSections(payload.subsections);\r\n\t//}\r\n\t/**\r\n        Creates a PROMPT and if user permits, deletes this CONTAINER from the DOM.\r\n        Optionally, this should also delete the object from the database\r\n        @returns {void}\r\n    */\r\n\tremove() {\r\n\t\ttry {\r\n\t\t\t/*\r\n\t\t\tlet dialog = new PROMPT(label, text, [], [], true); // label, text, buttons, inputs, vertical            \r\n\t\t\tdialog.form.footer.buttonGroup.children[0].setLabel('Remove', ICONS.REMOVE);\r\n\t\t\tdialog.form.footer.buttonGroup.children[0].el.onclick = () => {\r\n\t\t\t\tthis.destroy();\r\n\t\t\t\tthis.prompt.hide();\r\n\t\t\t};\r\n\t\t\tdialog.show();\r\n\t\t\t*/\r\n\t\t\tlet dialog = new DIALOG(new MODEL().set({\r\n\t\t\t\t'label': 'Remove ' + this.className + '{' + this.element + '}[' + this.id + ']',\r\n\t\t\t\t'text': 'Remove ' + this.className + ' from ' + this.node.node.node.className + '?',\r\n\t\t\t\t'token': this.getMainContainer().getToken()\r\n\t\t\t}));\r\n\t\t\tdialog.show();\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('Unable to disable this ' + this.element, e);\r\n\t\t}\r\n\t}\r\n\t/**\r\n        Typically this function is used within JQuery posts.\r\n        If the results are a Payload and its status is \"success\",\r\n        the page is reloaded.\r\n        @param {object} payload A post payload\r\n        @param {any} status Result status\r\n        @returns {void} \r\n    */\r\n\tajaxRefreshIfSuccessful(payload, status) {\r\n\t\t//console.log('ajaxRefreshIfSuccessful: Payload', payload, 'status', status);\r\n\t\tif (payload.result) { //!== 0 \r\n\t\t\tlet url = new URL(window.location.href);\r\n\t\t\tlet returnUrl = url.searchParams.get('ReturnUrl');\r\n\t\t\tif (returnUrl) {\r\n\t\t\t\tlocation.href = url.origin + returnUrl;\r\n\t\t\t} else {\r\n\t\t\t\tlocation.reload(true);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.log('Login Failed.  Unable to POST results to server with status: \"' + status + '\"', payload);\r\n\t\t}\r\n\t}\r\n\t/**\r\n        Creates a PROMPT and if user permits, deletes this CONTAINER from the DOM.\r\n        Optionally, this should also delete the object from the database\r\n        @returns {void}\r\n    */\r\n\tdisable() {\r\n\t\t//let label = 'Disable ' + this.className + '{' + this.element + '}[' + this.id + ']';\r\n\t\t//let text = 'Disable ' + label + ' in the Database?<br>This ' + this.className + ' will be permenantly deleted from database in X days!!!';\r\n\t\t//let container = this.getContainer();\r\n\t\t//let main = container.getMainContainer();\r\n\t\t//let token = this.getMainContainer().getToken();\r\n\t\t//console.log('Token', token);\r\n\t\t/*\r\n        try {\r\n\t\t\tthis.prompt = new PROMPT(label, text, [], [], true);\r\n\t\t\tthis.prompt.form.footer.buttonGroup.children[0].setLabel('Disable', ICONS.REMOVE);\r\n\t\t\tthis.prompt.form.footer.buttonGroup.children[0].el.onclick = () => {\r\n\t\t\t\tthis.destroy();\r\n\t\t\t\tthis.prompt.hide();\r\n\t\t\t\tconsole.log('TODO: Disable method on Container controller.');\r\n\t\t\t\tconsole.log(100, 'Disabling ' + this.className);\r\n\t\t\t\t$.post('/' + this.className + '/Disable/' + this.id, {\r\n\t\t\t\t\t'__RequestVerificationToken': token //token.value\r\n\t\t\t\t}, this.ajaxRefreshIfSuccessful);\r\n\t\t\t\tconsole.log(100, 'Disable Complete');\r\n\t\t\t};\r\n\t\t\tthis.prompt.show();\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('Unable to disable this ' + this.element, e);\r\n\t\t}\r\n        */\r\n    }\r\n    /** Creates a DATEOBJECT using this Container's dateCreated attribute\r\n        @returns {DATEOBJECT} An easy to use date object\r\n    */\r\n    getDateCreated() {\r\n        return DATEOBJECT.getDateObject(new STRING(this.dateCreated).getDateValue(this.dateCreated));\r\n    }\r\n}\r\nexport { ATTRIBUTES, DATAELEMENTS, DATEOBJECT, DIALOG, EL, FOOTER, HEADER, ICONS, INPUTTYPES, MODEL, STRING };\r\n/* eslint-enable max-lines */"]}