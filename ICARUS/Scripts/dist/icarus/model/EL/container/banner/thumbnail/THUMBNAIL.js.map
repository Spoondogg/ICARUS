{"version":3,"sources":["model/EL/container/banner/thumbnail/THUMBNAIL.js"],"names":["NAVITEM","ATTRIBUTES","EL","MODEL","HEADER","IMG","P","STRING","THUMBNAIL","[object Object]","node","model","super","this","addClass","image","anchor","$","el","insertBefore","label","header","set","p","truncate","fetchImage","dataId","parsed","data","img","Number","isInteger","parseInt","getJSON","jsonResults","JSON","parse","forEach","name","value","src","showImageDetails","e","console","log","setAttribute","innerHTML","filename","id","fileSize","dimX","dimY","fileType","ee"],"mappings":"OACOA,SAAWC,WAAYC,GAAIC,UAAa,yCACxCC,WAAY,mCACZC,QAAS,6BACTC,MAAO,yBACPC,WAAY,0CAKJ,MAAMC,kBAAkBR,QAKtCS,YAAYC,EAAMC,GACjBC,MAAMF,EAAMC,GACZE,KAAKC,SAAS,gDACdD,KAAKE,MAAQ,IAAIV,IAAIQ,KAAKG,OAAQ,IAAIb,OACtCc,EAAEJ,KAAKE,MAAMG,IAAIC,aAAaN,KAAKG,OAAOI,MAAMF,IAChDL,KAAKQ,OAAS,IAAIjB,OAAOS,KAAKG,QAAQ,IAAIb,OAAQmB,IAAI,CAAEF,MAAS,qBACjEP,KAAKU,EAAI,IAAIjB,EAAEO,KAAKG,OAAQ,IAAIb,MAAS,IAAII,OAAO,wBAAwBiB,SAAS,MACrFX,KAAKY,aAKNhB,aACC,GAAII,KAAKa,OAAS,IAAsB,IAAjBb,KAAKa,OAAe,CAC1C,IAAIC,EAAS,KACb,GAAId,KAAKe,KAAKC,IACb,GAAIC,OAAOC,UAAUC,SAASnB,KAAKe,KAAKC,MACvC,IACCZ,EAAEgB,QAAQ,iBAAmBD,SAASnB,KAAKe,KAAKC,KAAOD,IACtD,GAAIA,EAAKjB,OACJiB,EAAKjB,MAAMuB,YAAa,CAC3BP,EAASQ,KAAKC,MAAMR,EAAKjB,MAAMuB,aAC/B,IAAIL,EAAM,GACVF,EAAOU,QAAQ,EAAGC,KAAAA,EAAMC,MAAAA,MACvBV,EAAIS,GAAQC,EACC,WAATD,IACHzB,KAAKE,MAAMG,GAAGsB,IAAMX,EAAIS,MAGtBzB,KAAKe,KAAKa,kBACb5B,KAAK4B,iBAAiBZ,MAKzB,MAAOa,GACRC,QAAQC,IAAI,+BAAgCF,QAG7C7B,KAAKE,MAAMG,GAAG2B,aAAa,MAAOhC,KAAKe,KAAKC,MAShDpB,iBAAiBoB,GAChB,IACChB,KAAKQ,OAAOH,GAAG4B,UAAYjB,EAAIkB,SAC/BlC,KAAKU,EAAEL,GAAG4B,UAAY,OAASjB,EAAImB,GAAK,iBAAmBnB,EAAIoB,SAAW,OAASpB,EAAIqB,KAAO,MAAQrB,EAAIsB,KAAO,QAAUtB,EAAIuB,SAC9H,MAAOC,GACRV,QAAQC,IAAI,qCAAsCf,YAI5C5B,WAAYC,GAAIC","file":"THUMBNAIL.js","sourcesContent":["/** @module */\r\nimport NAVITEM, { ATTRIBUTES, EL, MODEL } from '../../../nav/navitem/NAVITEM.js';\r\nimport HEADER from '../../../header/header.js';\r\nimport IMG from '../../../img/IMG.js';\r\nimport P from '../../../p/P.js';\r\nimport STRING from '../../../../../STRING.js';\r\n/** A full-width NavItem with a Thumbnail image, label and description\r\n    @class\r\n    @extends CONTAINER\r\n*/\r\nexport default class THUMBNAIL extends NAVITEM { //CONTAINER {\r\n\t/** Constructs a Bootstrap Jumbotron\r\n        @param {CONTAINER} node The model\r\n        @param {MODEL} model Object Model\r\n    */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, model);\r\n\t\tthis.addClass('thumbnail col-xs-12 col-sm-6 col-lg-offset-0');\r\n\t\tthis.image = new IMG(this.anchor, new MODEL());\r\n\t\t$(this.image.el).insertBefore(this.anchor.label.el);\r\n\t\tthis.header = new HEADER(this.anchor, new MODEL().set({ 'label': 'thumbnailheader' }));\r\n\t\tthis.p = new P(this.anchor, new MODEL(), new STRING('thumbnaildescription').truncate(128));\r\n\t\tthis.fetchImage();\r\n\t}\r\n\t/** Retrieve a FormPost for the given MAIN and sets this image source\r\n\t    @returns {void}\r\n\t*/\r\n\tfetchImage() {\r\n\t\tif (this.dataId > 0 || this.dataId === -1) {\r\n\t\t\tlet parsed = null;\r\n\t\t\tif (this.data.img) {\r\n\t\t\t\tif (Number.isInteger(parseInt(this.data.img))) { // If this.data.img is integer, retrieve relevant formpost\r\n\t\t\t\t\ttry { // Test to see if the formpost can be retrieved\r\n\t\t\t\t\t\t$.getJSON('/FORMPOST/Get/' + parseInt(this.data.img), (data) => { // If access granted...\r\n\t\t\t\t\t\t\tif (data.model) {\r\n\t\t\t\t\t\t\t\tif (data.model.jsonResults) {\r\n\t\t\t\t\t\t\t\t\tparsed = JSON.parse(data.model.jsonResults);\r\n\t\t\t\t\t\t\t\t\tlet img = {}; // Extract the base64 values and create an image\r\n\t\t\t\t\t\t\t\t\tparsed.forEach(({ name, value }) => {\r\n\t\t\t\t\t\t\t\t\t\timg[name] = value;\r\n\t\t\t\t\t\t\t\t\t\tif (name === 'base64') {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.image.el.src = img[name];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tif (this.data.showImageDetails) {\r\n\t\t\t\t\t\t\t\t\t\tthis.showImageDetails(img);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tconsole.log('Unable to retrieve FormPost.', e);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.image.el.setAttribute('src', this.data.img);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** Appends image metadata to thumbnail\r\n\t    @param {object} img An image model\r\n\t    @returns {void}\r\n\t*/\r\n\tshowImageDetails(img) {\r\n\t\ttry {\r\n\t\t\tthis.header.el.innerHTML = img.filename;\r\n\t\t\tthis.p.el.innerHTML = 'Id: ' + img.id + '<br>Filesize: ' + img.fileSize + 'kb (' + img.dimX + ' x ' + img.dimY + ')<br>' + img.fileType;\r\n\t\t} catch (ee) {\r\n\t\t\tconsole.log('Unable to set Thumbnail attributes', img);\r\n\t\t}\r\n\t}\r\n}\r\nexport { ATTRIBUTES, EL, MODEL };"]}