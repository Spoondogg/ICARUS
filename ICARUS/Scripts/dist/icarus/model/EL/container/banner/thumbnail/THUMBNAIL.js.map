{"version":3,"sources":["model/EL/container/banner/thumbnail/THUMBNAIL.js"],"names":["NAVITEM","ATTRIBUTES","EL","MODEL","BUTTONGROUP","HEADER","IMG","MODAL","P","STRING","THUMBNAIL","[object Object]","node","model","super","this","addClass","image","body","pane","header","set","label","data","p","truncate","buttonGroup","dataId","parsed","img","Number","isInteger","parseInt","$","getJSON","jsonResults","JSON","parse","length","name","value","el","src","base64","ee","console","log","showImageDetails","innerHTML","filename","id","fileSize","dimX","dimY","fileType","e","button","onclick","launchModal","bind","modal","container","style","show"],"mappings":"OAEOA,SAAWC,WAAYC,GAAIC,UAAa,yCACxCC,gBAAiB,mDACjBC,WAAY,mCAEZC,QAAS,6BACTC,UAAW,iCACXC,MAAO,yBACPC,WAAY,0CAKJ,MAAMC,kBAAkBV,QAKtCW,YAAYC,EAAMC,GAEXC,MAAMF,EAAMC,GAEZE,KAAKC,SAAS,gDAGrBL,YAOC,GANAI,KAAKE,MAAQ,IAAIX,IAAIS,KAAKG,KAAKC,KAAM,IAAIhB,OACzCY,KAAKK,OAAS,IAAIf,OAAOU,KAAKG,KAAKC,MAAM,IAAIhB,OAAQkB,IAAI,CAAEC,MAASP,KAAKQ,KAAKH,UAC9EL,KAAKS,EAAI,IAAIhB,EAAEO,KAAKG,KAAKC,KAAM,IAAIhB,MAAS,IAAIM,OAAOM,KAAKQ,KAAKC,GAAGC,SAAS,MAC7EV,KAAKW,YAAc,IAAItB,YAAYW,KAAKG,KAAKC,KAAM,aAG/CJ,KAAKY,OAAS,IAAsB,IAAjBZ,KAAKY,OAAe,CAC1C,IAAIC,EAAS,KACb,GAAIb,KAAKQ,KAAKM,IAEb,GAAIC,OAAOC,UAAUC,SAASjB,KAAKQ,KAAKM,MAEvC,IACCI,EAAEC,QAAQ,iBAAmBF,SAASjB,KAAKQ,KAAKM,KAAON,IACtD,GAAIA,EAAKV,MACR,GAAIU,EAAKV,MAAMsB,YAAa,CAC3BP,EAASQ,KAAKC,MAAMd,EAAKV,MAAMsB,aAEJ,IAAIN,EAAM,GAIrC,IAAK,IAAIL,EAAI,EAAGA,EAAII,EAAOU,OAAQd,IAClCK,EAAID,EAAOJ,GAAGe,MAAQX,EAAOJ,GAAGgB,MAEjC,IAECzB,KAAKE,MAAMwB,GAAGC,IAAMb,EAAIc,OACvB,MAAOC,GACRC,QAAQC,IAAI,gCAAiCjB,GAG9C,GAAId,KAAKQ,KAAKwB,iBACb,IAGChC,KAAKK,OAAOqB,GAAGO,UAAYnB,EAAIoB,SAE/BlC,KAAKS,EAAEiB,GAAGO,UAAY,OAASnB,EAAIqB,GAAK,iBAAmBrB,EAAIsB,SAAW,OAAStB,EAAIuB,KAAO,MAAQvB,EAAIwB,KAAO,QAAUxB,EAAIyB,SAC9H,MAAOV,GACRC,QAAQC,IAAI,qCAAsCjB,SAIpDgB,QAAQC,IAAI,wBAId,MAAOS,GACRV,QAAQC,IAAI,+BAAgCS,QAG7CxC,KAAKE,MAAQ,IAAIX,IAAIS,KAAKG,KAAKC,KAAM,IAAIhB,MAAM,IAAIF,WAAW,CAAEyC,IAAO3B,KAAKQ,KAAKM,QAGnFd,KAAKyC,OAAOf,GAAGgB,QAAU1C,KAAK2C,YAAYC,KAAK5C,OAMjDJ,cACCI,KAAK6C,MAAQ,IAAIrD,MAAMQ,KAAKQ,KAAKH,QACjCL,KAAK6C,MAAMC,UAAU3C,KAAKC,KAAKH,SAAS,aACxCD,KAAK6C,MAAMC,UAAU5C,MAAQ,IAAIX,IAAIS,KAAK6C,MAAMC,UAAU3C,KAAKC,KAAM,IAAIhB,OACzEY,KAAK6C,MAAMC,UAAU5C,MAAMwB,GAAGC,IAAM3B,KAAKE,MAAMwB,GAAGC,IAClD3B,KAAK6C,MAAMC,UAAUzC,OAAS,IAAIf,OAAOU,KAAK6C,MAAMC,UAAU3C,KAAKC,MAAM,IAAIhB,OAAQkB,IAAI,CACxFC,MAASP,KAAKQ,KAAKH,UAEpBL,KAAK6C,MAAMC,UAAUrC,EAAI,IAAIhB,EAAEO,KAAK6C,MAAMC,UAAU3C,KAAKC,KAAM,IAAIhB,MAAM,IAAIF,WAAW,CACvF6D,MAAS,kBACL/C,KAAKQ,KAAKC,GACfT,KAAK6C,MAAMG,eAGJ9D,WAAYC,GAAIC","file":"THUMBNAIL.js","sourcesContent":["/** @module */\r\n//import CONTAINER, { ATTRIBUTES, EL, MODEL, STRING } from '../../CONTAINER.js';\r\nimport NAVITEM, { ATTRIBUTES, EL, MODEL } from '../../../nav/navitem/NAVITEM.js';\r\nimport BUTTONGROUP from '../../../group/buttongroup/BUTTONGROUP.js';\r\nimport HEADER from '../../../header/header.js';\r\n//import { ICONS } from '../../../../../enums/ICONS.js';\r\nimport IMG from '../../../img/IMG.js';\r\nimport MODAL from '../../../modal/MODAL.js';\r\nimport P from '../../../p/P.js';\r\nimport STRING from '../../../../../STRING.js';\r\n/** Jumbotron with centered icon and text\r\n    @class\r\n    @extends CONTAINER\r\n*/\r\nexport default class THUMBNAIL extends NAVITEM { //CONTAINER {\r\n\t/** Constructs a Bootstrap Jumbotron.\r\n        @param {CONTAINER} node The model\r\n        @param {MODEL} model Object Model\r\n    */\r\n\tconstructor(node, model) {\r\n\t\t//super(node, 'DIV', model);\r\n        super(node, model);\r\n\t\t//this.setClass('thumbnail col-xs-12 col-sm-6 col-lg-offset-0'); // Override icarus-container \r\n        this.addClass('thumbnail col-xs-12 col-sm-6 col-lg-offset-0'); // Override icarus-container \r\n\t\t//this.body.pane.addClass('thumbnail');\r\n\t}\r\n\tconstruct() {\r\n\t\tthis.image = new IMG(this.body.pane, new MODEL());\r\n\t\tthis.header = new HEADER(this.body.pane, new MODEL().set({ 'label': this.data.header }));\r\n\t\tthis.p = new P(this.body.pane, new MODEL(), new STRING(this.data.p).truncate(128));\r\n\t\tthis.buttonGroup = new BUTTONGROUP(this.body.pane, 'btn-block');\r\n\t\t//this.button = this.buttonGroup.addButton('', ICONS.CHEVRON_RIGHT);\r\n\t\t//this.button.addClass('btn-block');\r\n\t\tif (this.dataId > 0 || this.dataId === -1) {\r\n\t\t\tlet parsed = null;\r\n\t\t\tif (this.data.img) {\r\n\t\t\t\t// If this.data.img is integer, retrieve relevant formpost\r\n\t\t\t\tif (Number.isInteger(parseInt(this.data.img))) {\r\n\t\t\t\t\t// Test to see if the formpost can be retrieved\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t$.getJSON('/FORMPOST/Get/' + parseInt(this.data.img), (data) => { // If access granted...\r\n\t\t\t\t\t\t\tif (data.model) {\r\n\t\t\t\t\t\t\t\tif (data.model.jsonResults) {\r\n\t\t\t\t\t\t\t\t\tparsed = JSON.parse(data.model.jsonResults);\r\n\t\t\t\t\t\t\t\t\t// Extract the base64 values and create an image\r\n                                    let img = {};\r\n                                    //parsed.forEach((obj) => {\r\n                                        //img[obj.name] = obj.value;\r\n                                    //});\r\n\t\t\t\t\t\t\t\t\tfor (let p = 0; p < parsed.length; p++) {\r\n\t\t\t\t\t\t\t\t\t\timg[parsed[p].name] = parsed[p].value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\t\t//this.image.el.src = img['base64'];\r\n\t\t\t\t\t\t\t\t\t\tthis.image.el.src = img.base64;\r\n\t\t\t\t\t\t\t\t\t} catch (ee) {\r\n\t\t\t\t\t\t\t\t\t\tconsole.log('Unable to set Thumbnail image', img);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// Set text in Thumbnail when required (see ImageGallery.js)\r\n\t\t\t\t\t\t\t\t\tif (this.data.showImageDetails) {\r\n\t\t\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\t\t\t//this.image.el.src = img['base64'];\r\n\t\t\t\t\t\t\t\t\t\t\t//this.header.el.innerHTML = img['filename'];\r\n\t\t\t\t\t\t\t\t\t\t\tthis.header.el.innerHTML = img.filename;\r\n\t\t\t\t\t\t\t\t\t\t\t//this.p.el.innerHTML = 'Id: ' + img['id'] + '<br>' + 'Filesize: ' + img['fileSize'] + 'kb (' + img['dimX'] + ' x ' + img['dimY'] + ')<br>' + img['fileType'];\r\n\t\t\t\t\t\t\t\t\t\t\tthis.p.el.innerHTML = 'Id: ' + img.id + '<br>Filesize: ' + img.fileSize + 'kb (' + img.dimX + ' x ' + img.dimY + ')<br>' + img.fileType;\r\n\t\t\t\t\t\t\t\t\t\t} catch (ee) {\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('Unable to set Thumbnail attributes', img);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tconsole.log('Json Results empty');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tconsole.log('Unable to retrieve FormPost.', e);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.image = new IMG(this.body.pane, new MODEL(new ATTRIBUTES({ 'src': this.data.img })));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.button.el.onclick = this.launchModal.bind(this);\r\n\t\t}\r\n\t}\r\n\t/** Launches a modal that contains the detailed view of the given article\r\n\t    @returns {void}\r\n\t*/\r\n\tlaunchModal() {\r\n\t\tthis.modal = new MODAL(this.data.header);\r\n\t\tthis.modal.container.body.pane.addClass('thumbnail');\r\n\t\tthis.modal.container.image = new IMG(this.modal.container.body.pane, new MODEL());\r\n\t\tthis.modal.container.image.el.src = this.image.el.src;\r\n\t\tthis.modal.container.header = new HEADER(this.modal.container.body.pane, new MODEL().set({\r\n\t\t\t'label': this.data.header\r\n\t\t}));\r\n\t\tthis.modal.container.p = new P(this.modal.container.body.pane, new MODEL(new ATTRIBUTES({\r\n\t\t\t'style': 'height:auto;'\r\n\t\t})), this.data.p);\r\n\t\tthis.modal.show();\r\n\t}\r\n}\r\nexport { ATTRIBUTES, EL, MODEL };"]}