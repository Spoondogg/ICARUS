{"version":3,"sources":["icarus/model/EL/container/CONTAINERBODY.js"],"names":["EL","MODEL","CONTAINERBODY","[object Object]","node","model","super","this","setClass","sidebar","pane","el","addEventListener","handleTouchStart","passive","handleTouchMove","xDown","yDown","ev","touches","clientX","clientY","evt","xUp","yUp","xDiff","yDiff","Math","abs","console","log","className","$","collapse"],"mappings":"OAGOA,IAAMC,UAAa,0BAOX,MAAMC,sBAAsBF,GAM1CG,YAAYC,EAAMC,GACjBC,MAAMF,EAAM,MAAOC,GACnBE,KAAKC,SAAS,8BACdD,KAAKE,QAAU,KACfF,KAAKG,KAAO,IAAIV,GAAGO,KAAM,MAAO,IAAIN,MAAM,SAE1CM,KAAKG,KAAKC,GAAGC,iBAAiB,aAAcL,KAAKM,iBAAkB,CAAEC,SAAS,IAC9EP,KAAKG,KAAKC,GAAGC,iBAAiB,YAAaL,KAAKQ,gBAAiB,CAAED,SAAS,IAC5EP,KAAKS,MAAQ,KACbT,KAAKU,MAAQ,KAgBdd,iBAAiBe,GAChBX,KAAKS,MAAQE,EAAGC,QAAQ,GAAGC,QAC3Bb,KAAKU,MAAQC,EAAGC,QAAQ,GAAGE,QAS5BlB,gBAAgBmB,GACf,GAAKf,KAAKS,OAAUT,KAAKU,MAAzB,CAGA,IAAIM,EAAMD,EAAIH,QAAQ,GAAGC,QACrBI,EAAMF,EAAIH,QAAQ,GAAGE,QACrBI,EAAQlB,KAAKS,MAAQO,EACrBG,EAAQnB,KAAKU,MAAQO,EACrBG,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,GAC1BD,EAAQ,EACXI,QAAQC,IAAIvB,KAAKwB,UAAY,cAE7BF,QAAQC,IAAIvB,KAAKwB,UAAY,eAEpBL,EAAQ,EAClBG,QAAQC,IAAIvB,KAAKwB,UAAY,aAE7BF,QAAQC,IAAIvB,KAAKwB,UAAY,eAG9BxB,KAAKS,MAAQ,KACbT,KAAKU,MAAQ,MAMdd,WACC6B,EAAEzB,KAAKI,IAAIsB,SAAS","file":"CONTAINERBODY.js","sourcesContent":["/**\r\n    @module\r\n*/\r\nimport EL, { MODEL } from '../EL.js';\r\n/**\r\n    Containers have a 'body' that can contain an optional sidebar\r\n    and detect swipe events\r\n    @class\r\n    @extends EL\r\n */\r\nexport default class CONTAINERBODY extends EL {\r\n\t/**\r\n\t    Construct a body with an optional sidebar\r\n\t     @param {CONTAINER} node Parent\r\n\t     @param {MODEL} model Object\r\n\t */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, 'DIV', model);\r\n\t\tthis.setClass('container-body collapse in');\r\n\t\tthis.sidebar = null;\r\n\t\tthis.pane = new EL(this, 'DIV', new MODEL('pane'));\r\n\t\t// Add swipe detection for editing options in sidebar\r\n\t\tthis.pane.el.addEventListener('touchstart', this.handleTouchStart, { passive: true });\r\n\t\tthis.pane.el.addEventListener('touchmove', this.handleTouchMove, { passive: true });\r\n\t\tthis.xDown = null;\r\n\t\tthis.yDown = null;\r\n\t\t/*if (dev) {\r\n\t\t    this.pane.el.ondblclick = function (e) {\r\n\t\t        //node.toggleSidebar();\r\n\t\t        console.log('Launch Editor for ' + node.className + '(' + node.id + ')');\r\n\t\t        $(node.navBar.header.menu.el).collapse('show');\r\n\t\t        node.btnSave.el.click();\r\n\t\t        e.stopPropagation(); // Prevent parent double click()\r\n\t\t    };\r\n\t\t}*/\r\n\t}\r\n\t/**\r\n\t\t     Sets start coordinates\r\n\t\t     @param {Event} ev Event\r\n\t         @returns {void}\r\n\t\t*/\r\n\thandleTouchStart(ev) {\r\n\t\tthis.xDown = ev.touches[0].clientX;\r\n\t\tthis.yDown = ev.touches[0].clientY;\r\n\t}\r\n\t/**\r\n\t\t    Process the swipe on body.pane\r\n\t\t    Move body.pane into its own PANE class\r\n\t\t    @see https://stackoverflow.com/questions/2264072/detect-a-finger-swipe-through-javascript-on-the-iphone-and-android\r\n\t\t    @param {any} evt Event\r\n\t        @returns {void}\r\n\t\t */\r\n\thandleTouchMove(evt) {\r\n\t\tif (!this.xDown || !this.yDown) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar xUp = evt.touches[0].clientX;\r\n\t\tvar yUp = evt.touches[0].clientY;\r\n\t\tvar xDiff = this.xDown - xUp;\r\n\t\tvar yDiff = this.yDown - yUp;\r\n\t\tif (Math.abs(xDiff) > Math.abs(yDiff)) { /*most significant*/\r\n\t\t\tif (xDiff > 0) {\r\n\t\t\t\tconsole.log(this.className + 'left swipe');\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(this.className + 'right swipe');\r\n\t\t\t}\r\n\t\t} else if (yDiff > 0) {\r\n\t\t\tconsole.log(this.className + ' up swipe');\r\n\t\t} else {\r\n\t\t\tconsole.log(this.className + ' down swipe');\r\n\t\t}\r\n\t\t/* reset values */\r\n\t\tthis.xDown = null;\r\n\t\tthis.yDown = null;\r\n\t}\r\n\t/**\r\n\t\t    Toggle the collapsed state of this container\r\n\t        @returns {void}\r\n\t\t */\r\n\tcollapse() {\r\n\t\t$(this.el).collapse('toggle');\r\n\t}\r\n}"]}