{"version":3,"sources":["model/EL/container/formelement/formselect/FORMSELECT.js"],"names":["FORMELEMENT","ATTRIBUTES","EL","INPUTTYPES","MODEL","OPTION","SELECT","FORMSELECT","[object Object]","node","model","super","this","dataElements","createSelect","input","body","pane","class","name","String","guid","friendly","dataId","options","data","split","o","length","addOption","e","console","log","value","label","push"],"mappings":"OACOA,aAAeC,WAAYC,GAAIC,WAAYC,UAAa,2BACxDC,WAAY,mCACZC,WAAY,2CAMJ,MAAMC,mBAAmBP,YAMvCQ,YAAYC,EAAMC,GACjBC,MAAMF,EAAM,MAAOC,GACnBE,KAAKC,aAAe,CAAC,WACrBD,KAAKE,eAKNN,eAKC,GAJAI,KAAKG,MAAQ,IAAIT,OAAOM,KAAKI,KAAKC,KAAM,IAAIb,MAAM,IAAIH,WAAW,CAChEiB,MAAS,eACTC,MAAS,SAAWC,SAASC,QAAQC,eAElCV,KAAKW,OAAS,EAAG,CACpB,IAAIC,EAAUZ,KAAKa,KAAKD,QAAQE,MAAM,KACtC,IACC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IACnCf,KAAKiB,UAAUL,EAAQG,GAAIH,EAAQG,IAEnC,MAAOG,GACRC,QAAQC,IAAIF,IAGd,OAAOlB,KAAKG,MASbP,UAAUyB,EAAOC,GAChB,IACCtB,KAAKG,MAAMS,QAAQW,KAAK,IAAI9B,OAAOO,KAAKG,MAAOkB,EAAOC,IACrD,MAAOJ,GACR,MAAMA,WAIA5B,GAAIC,WAAYE","file":"FORMSELECT.js","sourcesContent":["/** @module */\r\nimport FORMELEMENT, { ATTRIBUTES, EL, INPUTTYPES, MODEL } from '../FORMELEMENT.js';\r\nimport OPTION from '../../../option/OPTION.js';\r\nimport SELECT from '../../../select/SELECT.js';\r\n//import STRING from '../../../../../STRING.js';\r\n/** Represents a <SELECT> for an Icarus Form    \r\n    @class\r\n    @extends FORMELEMENT\r\n*/\r\nexport default class FORMSELECT extends FORMELEMENT {\r\n\t/** An Input/Select OPTION constructor.\r\n\t    @param {EL} node The parent\r\n\t    @param {string} model The Form Select model\r\n\t    @param {array} options A collection of key,value pairs\r\n\t */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, 'DIV', model);\r\n\t\tthis.dataElements = ['options'];\r\n\t\tthis.createSelect();\r\n\t}\r\n\t/** Creates the SELECT Element\r\n        @returns {SELECT} A SELECT input Element\r\n    */\r\n\tcreateSelect() {\r\n\t\tthis.input = new SELECT(this.body.pane, new MODEL(new ATTRIBUTES({\r\n\t\t\t'class': 'form-control',\r\n\t\t\t'name': ('INPUT_' + String().guid()).friendly()\r\n\t\t})));\r\n\t\tif (this.dataId > 0) {\r\n\t\t\tlet options = this.data.options.split(',');\r\n\t\t\ttry {\r\n\t\t\t\tfor (let o = 0; o < options.length; o++) {\r\n\t\t\t\t\tthis.addOption(options[o], options[o]);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.input;\r\n\t}\r\n\t/** Adds an OPTION to this SELECT\r\n        @param {string} value The value\r\n        @param {string} label The label\t    \r\n        @param {boolean} selected If true, option is selected\r\n        @returns {void}\r\n        @throws Throws an error if unable to create the OPTION element\r\n    */\r\n\taddOption(value, label) {\r\n\t\ttry {\r\n\t\t\tthis.input.options.push(new OPTION(this.input, value, label));\r\n\t\t} catch (e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n}\r\nexport { EL, INPUTTYPES, OPTION };"]}