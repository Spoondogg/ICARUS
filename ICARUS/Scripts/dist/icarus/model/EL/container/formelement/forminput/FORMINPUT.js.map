{"version":3,"sources":["model/EL/container/formelement/forminput/FORMINPUT.js"],"names":["FORMELEMENT","ATTRIBUTES","EL","INPUTTYPES","MODEL","DATALIST","FORMTEXTAREA","IMG","INPUT","FORMINPUT","[object Object]","node","model","console","log","super","this","createInput","nm","attributes","name","data","val","value","input","body","pane","class","type","list","createSubForm","addInputOptions","options","datalist","id","Array","isArray","o","length","addOption","img","el","onclick","click","onload","dimX","setAttribute","naturalWidth","dimY","naturalHeight","base64","set","fileName","label","fileType","fileSize","onchange","readURL","bind","files","reader","FileReader","e","$","attr","target","result","src","innerHTML","Math","ceil","size","readAsDataURL","navBar","header","tab","anchor","setInnerHTML","push","Option"],"mappings":"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","file":"FORMINPUT.js","sourcesContent":["/** @module */\r\nimport FORMELEMENT, { ATTRIBUTES, EL, INPUTTYPES, MODEL } from '../FORMELEMENT.js';\r\nimport DATALIST from '../../../datalist/DATALIST.js';\r\n//import PROMPT from '../../../modal/prompt/PROMPT.js';\r\nimport FORMTEXTAREA from '../formtextarea/FORMTEXTAREA.js';\r\nimport IMG from '../../../img/IMG.js';\r\nimport INPUT from '../../../input/INPUT.js';\r\n//import STRING from '../../../../../STRING.js';\r\n/** Represents an INPUT for an Icarus Form\r\n    @class\r\n    @extends FORMELEMENT\r\n*/\r\nexport default class FORMINPUT extends FORMELEMENT {\r\n\t/** Constructs a FORMINPUT element\r\n\t    @param {EL} node Parent\r\n\t    @param {MODEL} model The model\r\n\t */\r\n\tconstructor(node, model) {\r\n\t\tconsole.log('FORMINPUT');\r\n\t\tsuper(node, 'DIV', model);\r\n\t\tthis.createInput();\r\n\t}\r\n\t/** Creates an INPUT Element\r\n        @returns {INPUT} An INPUT EL\r\n        @todo: This should use a factory constructor pattern to create specific input types\r\n        @todo file, text, number, email, phone (html5 inputs) \r\n        @todo This should use a factory constructor pattern to create specific input types\r\n    */\r\n\tcreateInput() {\r\n\t\tlet nm = this.attributes.name || this.data.name;\r\n\t\tlet val = this.attributes.value || this.data.value;\r\n\t\tthis.input = new INPUT(this.body.pane, new MODEL(new ATTRIBUTES({\r\n\t\t\t'class': 'form-control',\r\n\t\t\t'type': this.attributes.type || this.data.type || 'TEXT',\r\n\t\t\t'list': nm + '-options',\r\n\t\t\t'name': nm,\r\n\t\t\t'value': val || ''\r\n\t\t})));\r\n\t\tif (this.data.type === 'file' || this.attributes.type === 'image' || this.attributes.type === 'file') {\r\n\t\t\tthis.createSubForm();\r\n\t\t} else {\r\n\t\t\tthis.addInputOptions();\r\n\t\t}\r\n\t\treturn this.input;\r\n\t}\r\n\t/** Add any preset options to the datalist\r\n\t    @returns {void}\r\n\t*/\r\n\taddInputOptions() {\r\n\t\tthis.options = [];\r\n\t\tthis.datalist = new DATALIST(this.node, new MODEL(new ATTRIBUTES({\r\n\t\t\t'id': this.attributes.name + '-options'\r\n\t\t})));\r\n\t\tif (Array.isArray(this.options)) {\r\n\t\t\tfor (let o = 0; o < this.options.length; o++) {\r\n\t\t\t\tthis.addOption(this.options[o].value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** Create an empty subform, similar to a data/attributes object to \r\n\t    save the image by FormPostId\r\n\t    @returns {void}\r\n\t*/\r\n\tcreateSubForm() {\r\n\t\tthis.img = new IMG(this.body.pane, new MODEL('input-image-preview'));\r\n\t\tthis.img.el.onclick = () => {\r\n\t\t\tthis.input.el.click();\r\n\t\t};\r\n\t\tthis.img.el.onload = () => {\r\n\t\t\tthis.dimX.input.el.setAttribute('value', this.img.el.naturalWidth);\r\n\t\t\tthis.dimY.input.el.setAttribute('value', this.img.el.naturalHeight);\r\n\t\t};\r\n\t\tthis.base64 = new FORMTEXTAREA(this.body.pane, new MODEL(new ATTRIBUTES({ //FORMTEXTAREA\r\n\t\t\t'name': 'base64'\r\n\t\t\t//'label': 'base64'\r\n\t\t}).set({\r\n\t\t\t'name': 'base64'\r\n\t\t\t//'label': 'base64'\r\n\t\t})));\r\n\t\tthis.fileName = new FORMINPUT(this.body.pane, new MODEL(new ATTRIBUTES({ //FORMINPUT\r\n\t\t\t'name': 'filename',\r\n\t\t\t'label': 'base64'\r\n\t\t}).set({\r\n\t\t\t'name': 'filename'\r\n\t\t\t//'label': 'filename'\r\n\t\t})));\r\n\t\tthis.fileType = new FORMINPUT(this.body.pane, new MODEL(new ATTRIBUTES({ //FORMINPUT\r\n\t\t\t'name': 'fileType',\r\n\t\t\t'label': 'base64'\r\n\t\t}).set({\r\n\t\t\t'name': 'fileType'\r\n\t\t\t//'label': 'fileType'\r\n\t\t})));\r\n\t\tthis.fileSize = new FORMINPUT(this.body.pane, new MODEL(new ATTRIBUTES({ //FORMINPUT\r\n\t\t\t'name': 'fileSize'\r\n\t\t}).set({\r\n\t\t\t'name': 'fileSize'\r\n\t\t\t//'label': 'fileSize'\r\n\t\t})));\r\n\t\tthis.dimX = new FORMINPUT(this.body.pane, new MODEL(new ATTRIBUTES({ //FORMINPUT\r\n\t\t\t'name': 'dimX'\r\n\t\t}).set({\r\n\t\t\t'name': 'dimX'\r\n\t\t\t//'label': 'dimX'\r\n\t\t})));\r\n\t\tthis.dimY = new FORMINPUT(this.body.pane, new MODEL(new ATTRIBUTES({ //FORMINPUT\r\n\t\t\t'name': 'dimY'\r\n\t\t}).set({\r\n\t\t\t'name': 'dimY'\r\n\t\t\t//'label': 'dimY'\r\n\t\t})));\r\n\t\tthis.input.el.onchange = this.readURL.bind(this);\r\n\t}\r\n\t/** Reads the contents of this FILE INPUT and extracts the base64 values and metadata\r\n        When the input is set (selected from explorer), extract its data into the appropriate inputs (above)\r\n        @description Use FileReader to extract base64 and attributes\r\n        @todo This should detect file types and limit accordingly\r\n        @see https://gist.github.com/batuhangoksu/06bc056399d87b09243d\r\n        @throws Throws an error if unable to successfully read the Url\r\n        @return {boolean} Returns true if successful\r\n    */\r\n\treadURL() {\r\n\t\tconsole.log(10, 'readUrl():  Reading an Image');\r\n\t\ttry {\r\n\t\t\tif (this.input.el.files && this.input.el.files[0]) {\r\n\t\t\t\tlet reader = new FileReader();\r\n\t\t\t\treader.onload = function(e) {\r\n\t\t\t\t\t$(this.input.el).attr('src', e.target.result);\r\n\t\t\t\t\tthis.img.el.src = e.target.result;\r\n\t\t\t\t\tthis.base64.input.el.innerHTML = e.target.result;\r\n\t\t\t\t\tthis.fileName.input.el.value = this.input.el.files[0].name;\r\n\t\t\t\t\tthis.fileType.input.el.value = this.input.el.files[0].type;\r\n\t\t\t\t\tthis.fileSize.input.el.value = Math.ceil(this.input.el.files[0].size / 1000);\r\n\t\t\t\t}.bind(this);\r\n\t\t\t\treader.readAsDataURL(this.input.el.files[0]); // Load file\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\t/** Sets the label of this element to the given value.\r\n        @param {string} label The name to be set\r\n        @returns {ThisType} Returns this object for method chaining\r\n    */\r\n\tsetLabel(label) {\r\n\t\tthis.navBar.header.tab.anchor.setInnerHTML(label);\r\n\t\tthis.label.setInnerHTML(label);\r\n\t\tthis.input.el.setAttribute('name', label);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t\t    Adds an option to this input element\r\n\t        \r\n\t        @todo Consider how to share these lists with the entire application rather than\r\n\t\t    reduntantly load the same data over and over again.  \r\n\t        Perhaps there should be an OPT-LIST object inside MAIN\r\n\t\t    \r\n\t\t    @param {string} label The label\r\n\t\t    @param {string} value The value\r\n\r\n\t        @returns {ThisType} Returns this object for method chaining\r\n\t\t*/\r\n\taddOption(label, value) {\r\n\t\t/*if (typeof label === 'undefined' || typeof value === 'undefined') {\r\n\t\t\ttry {\r\n\t\t\t\tthis.prompt = new PROMPT('Add Option', 'Add an option to this select input:');\r\n\t\t\t\tthis.prompt.formGroup.addInput('label', INPUTTYPES.TEXT, '');\r\n\t\t\t\tthis.prompt.formGroup.addInput('value', INPUTTYPES.TEXT, '');\r\n\t\t\t\tthis.prompt.buttonGroup.addButton('Add Option').el.onclick = function() {\r\n\t\t\t\t\tthis.options.push(new Option(this.datalist.el, $(this.prompt.el).find('input[name=\"label\"]')[0].value, $(this.prompt.el).find('input[name=\"value\"]')[0].value));\r\n\t\t\t\t\tthis.prompt.hide();\r\n\t\t\t\t}.bind(this);\r\n\t\t\t\tthis.prompt.buttonGroup.addButton('Cancel').el.onclick = this.prompt.hide.bind(this);\r\n\t\t\t\tthis.prompt.show();\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log('Unable to change name for this element');\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t}\r\n\t\t} else {*/\r\n\t\tthis.options.push(new Option(this.datalist.el, label, value));\r\n\t\t//}\r\n\t\treturn this;\r\n\t}\r\n}\r\nexport { ATTRIBUTES, EL, FORMELEMENT, INPUTTYPES, MODEL };"]}