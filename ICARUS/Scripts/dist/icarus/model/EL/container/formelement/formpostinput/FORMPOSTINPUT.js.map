{"version":3,"sources":["model/EL/container/formelement/formpostinput/FORMPOSTINPUT.js"],"names":["FORMINPUT","ATTRIBUTES","EL","FORMELEMENT","MODEL","DIV","FORM","INPUT","MODAL","SPAN","FORMPOSTINPUT","[object Object]","node","model","super","this","createInput","inputGroup","body","pane","input","class","name","attributes","value","type","form","btnEdit","el","onclick","editFormPost","bind","btnNew","newAttributes","getContainer","id","data","shared","set","element","label","inputs","m","length","push","e","console","warn","container","dataIdLabel","$","getJSON","defaultInputArray","appendAdditionalModelInputs","setAttribute","dataElements","createForm","log","updateInput","Promise","resolve","reject","quickSave","Error","then","result","cc","getProtoTypeByClass","refresh","err","createEmptyForm","prompt","fieldset","formElementGroup","navBar","header","menu","getGroup","empty","addFormElementGroupContainerCase","addInputs","setPostUrl","afterSuccessfulPost","successfulFormPost","parsed","i","htmlDecode","jsonResults","createInputArrayHtmlDecoded","JSON","parse","message","show","getMainContainer","login","inp","children","parseInt","createInputArray","destroyForm","createFormPostForm","forEach","param","innerHTML","destroy","toggleHeaders","arr","addContainerCase"],"mappings":"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","file":"FORMPOSTINPUT.js","sourcesContent":["/**\r\n    @module\r\n*/\r\nimport FORMINPUT, { ATTRIBUTES, EL, FORMELEMENT, MODEL } from '../../formelement/forminput/FORMINPUT.js';\r\nimport DIV from '../../../div/DIV.js';\r\nimport FORM from '../../../form/FORM.js';\r\nimport INPUT from '../../../input/INPUT.js';\r\nimport MODAL from '../../../modal/MODAL.js';\r\nimport SPAN from '../../../span/SPAN.js';\r\n/**\r\n    Represents an INPUT element inside a group of form elements\r\n    \r\n    @description A FormPost Input acts as a special input that is populated\r\n    with the Form Post Editor.\r\n    The FormPostInput initially displays an individual INPUT, but can\r\n    retrieve a secondary sub-form based on the input's value (aka: FormPost Id)\r\n\r\n    @class\r\n    @extends FORMELEMENT\r\n*/\r\nexport default class FORMPOSTINPUT extends FORMELEMENT {\r\n\t/**\r\n\t    Constructs an INPUT element\r\n\t    @param {EL} node Parent\r\n\t    @param {MODEL} model The model\r\n\t */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, 'DIV', model);\r\n\t\tthis.createInput();\r\n\t}\r\n\t/**\r\n\t\t    Creates an Input Group with an INPUT element inside of it. \r\n\t        @returns {void}\r\n\t\t*/\r\n\tcreateInput() {\r\n\t\tthis.inputGroup = new DIV(this.body.pane, new MODEL(new ATTRIBUTES('input-group')));\r\n\t\tthis.input = new INPUT(this.inputGroup, new MODEL(new ATTRIBUTES({\r\n\t\t\t'class': 'form-control',\r\n\t\t\t'name': this.attributes.name,\r\n\t\t\t'value': this.attributes.value,\r\n\t\t\t'type': this.attributes.type || 'text'\r\n\t\t})));\r\n\t\tthis.form = null;\r\n\t\tif (this.attributes.value > 0 || this.value > 0) {\r\n\t\t\tthis.btnEdit = new SPAN(this.inputGroup, new MODEL(new ATTRIBUTES('input-group-addon')), 'EDIT1');\r\n\t\t\tthis.btnEdit.el.onclick = this.editFormPost.bind(this);\r\n\t\t}\r\n\t\tthis.btnNew = new SPAN(this.inputGroup, new MODEL(new ATTRIBUTES('input-group-addon')), 'NEW1');\r\n\t\tthis.btnNew.el.onclick = () => {\r\n\t\t\tthis.newAttributes(this.getContainer(), this.attributes.name, this);\r\n\t\t};\r\n\t}\r\n\t/**\r\n\t\t     Sets the id of the original FormPostInput to the given value\r\n\t\t     @param {number} id Id to set\r\n\t         @returns {void}\r\n\t\t */\r\n\tupdateInput(id) {\r\n\t\tthis.input.el.value = id;\r\n\t}\r\n\t/**\r\n\t    Returns the default Input array\r\n\t    @param {object} data Payload\r\n\t    @returns {Array} An array of INPUT models\r\n\t*/\r\n\tdefaultInputArray(data) {\r\n\t\treturn [\r\n\t\t\tnew MODEL(new ATTRIBUTES({\r\n\t\t\t\t'name': 'shared',\r\n\t\t\t\t'value': data.model.shared\r\n\t\t\t})).set({\r\n\t\t\t\t'element': 'INPUT',\r\n\t\t\t\t'label': 'shared',\r\n\t\t\t\t'value': '1'\r\n\t\t\t}),\r\n\t\t\tnew MODEL(new ATTRIBUTES({\r\n\t\t\t\t'name': 'id',\r\n\t\t\t\t'value': data.model.id\r\n\t\t\t})).set({\r\n\t\t\t\t'element': 'INPUT',\r\n\t\t\t\t'label': 'id'\r\n\t\t\t})\r\n\t\t];\r\n\t}\r\n\t/**\r\n\t    Append inputs from the given model\r\n\t    @param {Array} inputs An array of inputs\r\n\t    @param {Array} model An array of input models\r\n\t    @returns {Array} An array of inputs\r\n\t*/\r\n\tappendAdditionalModelInputs(inputs, model) {\r\n\t\ttry { // Append any model inputs if they exist\r\n\t\t\tfor (let m = 0; m < model.length; m++) {\r\n\t\t\t\tinputs.push(model[m]);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('No additional inputs exist for this form post', e);\r\n\t\t}\r\n\t\treturn inputs;\r\n\t}\r\n\t/**\r\n\t\t     Opens a Modal Form populated with an open version of the FormPost\r\n\t\t     @param {CONTAINER} container The container that this belongs to\r\n\t\t     @param {string} dataIdLabel The key (dataId or attributesId) to add object to\r\n\t\t     @param {MODEL} model Model\r\n\t         async\r\n\t         return {Promise<string>}\r\n\t         @returns {void}         \r\n\t\t */\r\n\tnewAttributes(container, dataIdLabel, model) {\r\n\t\ttry { // Generate new FormPost            \r\n\t\t\t$.getJSON('/FORMPOST/Get/0', (data) => {\r\n\t\t\t\tlet inputs = this.defaultInputArray(data);\r\n\t\t\t\tthis.appendAdditionalModelInputs(inputs, model.inputs);\r\n\t\t\t\tthis.input.el.setAttribute('value', data.model.id); // Set values in MODEL and DOM\r\n\t\t\t\tcontainer[dataIdLabel] = data.model.id;\r\n\t\t\t\tif (dataIdLabel === 'dataId') { // Append additional dataElements\r\n\t\t\t\t\tif (container.dataElements.length > 0) {\r\n\t\t\t\t\t\tthis.appendAdditionalModelInputs(inputs, container.dataElements);\r\n\t\t\t\t\t\t//for (let i = 0; i < container.dataElements.length; i++) {\r\n\t\t\t\t\t\t//\tinputs.push(container.dataElements[i]);\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (dataIdLabel === 'descriptionId') {\r\n\t\t\t\t\tinputs.push(new MODEL(new ATTRIBUTES({\r\n\t\t\t\t\t\t'name': 'description',\r\n\t\t\t\t\t\t'type': 'text'\r\n\t\t\t\t\t})).set({\r\n\t\t\t\t\t\t'element': 'TEXTAREA',\r\n\t\t\t\t\t\t'label': 'description'\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t\tthis.createForm(inputs); //data\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(0, 'Unable to retrieve FormPost.', e);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t        Executes on successful form post\r\n\t        @param {object} data Json payload\r\n\t        @param {CONTAINER} container This parent container\r\n\t        @see https://developers.google.com/web/fundamentals/primers/promises\r\n\t\t\t@see https://scotch.io/tutorials/javascript-promises-for-dummies\r\n\t\t\t@see http://usejsdoc.org/tags-async.html\r\n\t        @async\r\n\t\t\t@returns {Promise<boolean>} Returns true if Promise is resolved\r\n\t    */\r\n\tsuccessfulFormPost(data, container) {\r\n\t\tthis.updateInput(data.model.id);\r\n\t\tlet promise = new Promise((resolve, reject) => {\r\n\t\t\t//console.log('Promise: Saving parent form');\r\n\t\t\tif (container.quickSave(true)) {\r\n\t\t\t\t//resolve('QuickSaved');\r\n\t\t\t\tresolve(true);\r\n\t\t\t} else {\r\n\t\t\t\t//reject(Error('Failed to QuickSave'));\r\n\t\t\t\treject(Error('Failed to QuickSave'));\r\n\t\t\t}\r\n\t\t});\r\n\t\tpromise.then((result) => {\r\n\t\t\t//console.log('Promise success', result);\r\n\t\t\tlet cc = container.getProtoTypeByClass('CONTAINER');\r\n\t\t\tif (cc !== null) {\r\n\t\t\t\tcc.refresh();\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}, (err) => {\r\n\t\t\tconsole.log('promise fail', err);\r\n\t\t\treturn err; //console.log('promise fail', err);\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t\t    Constructs an empty FORM (id 3:formpost) and populates\r\n\t\t    with given inputs\r\n\t\t    @param {Array} inputs An array of inputs\r\n\t        param {object} data Payload\r\n\t\t    @returns {void}\r\n\t\t*/\r\n\tcreateForm(inputs) { //data\r\n\t\tthis.form = FORM.createEmptyForm(this.body.pane);\r\n\t\tthis.form.id = 3; //console.log('formpostinput: 3');\r\n\t\tthis.form.el.setAttribute('id', 3);\r\n\t\tthis.form.prompt = this;\r\n\t\tthis.form.fieldset.formElementGroup.navBar.header.menu.getGroup('ELEMENTS').empty();\r\n\t\tthis.addFormElementGroupContainerCase(['INPUT', 'SELECT', 'TEXTAREA']);\r\n\t\tthis.addInputs(inputs);\r\n\t\t//this.form.fieldset.formElementGroup.toggleHeaders();\r\n\t\tthis.form.setPostUrl('FormPost/Set');\r\n\t\tthis.form.afterSuccessfulPost = () => {\r\n\t\t\tthis.successfulFormPost()\r\n\t\t};\r\n\t}\r\n\t/**\r\n\t    Creates an array of inputs that have been parsed\r\n\t    @param {any} parsed A parsed payload\r\n\t    @param {Array} inputs An array of inputs\r\n\t    @returns {Array} An array of inputs\r\n\t*/\r\n\tcreateInputArrayHtmlDecoded(parsed, inputs) {\r\n\t\tfor (let i = 0; i < parsed.length; i++) {\r\n\t\t\tif (parsed[i].name !== 'id') {\r\n\t\t\t\tinputs.push(new MODEL(new ATTRIBUTES({\r\n\t\t\t\t\t'name': parsed[i].name,\r\n\t\t\t\t\t'value': this.htmlDecode(parsed[i].value) || ''\r\n\t\t\t\t})).set({\r\n\t\t\t\t\t'element': 'INPUT',\r\n\t\t\t\t\t'label': parsed[i].name\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn inputs;\r\n\t}\r\n\t/**\r\n\t\t    Edits an existing FormPost\r\n\t\t    param {ARRAY} inputArray Array of inputs\r\n\t        @returns {void}\r\n\t\t */\r\n\teditFormPost() { // If given value is an integer, assume this is the FormPostId, otherwise, retrieve the formpost\r\n\t\tlet inputs = [\r\n\t\t\tnew MODEL(new ATTRIBUTES({\r\n\t\t\t\t'name': 'id',\r\n\t\t\t\t'value': this.input.attributes.value\r\n\t\t\t})).set({\r\n\t\t\t\t'element': 'INPUT',\r\n\t\t\t\t'type': 'FORMPOST',\r\n\t\t\t\t'label': 'id'\r\n\t\t\t})\r\n\t\t];\r\n\t\ttry { // Test to see if the formpost can be retrieved\r\n\t\t\t$.getJSON('/FORMPOST/Get/' + this.input.attributes.value, (data) => { // If access granted...\t\t\t\t\r\n\t\t\t\tif (data.model) {\r\n\t\t\t\t\tif (data.model.jsonResults) {\r\n\t\t\t\t\t\tinputs = this.createInputArrayHtmlDecoded(JSON.parse(data.model.jsonResults), inputs);\r\n\t\t\t\t\t\tthis.createForm(inputs); //data\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log('Json Results empty');\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.prompt = new MODAL('Exception', data.message).show();\r\n\t\t\t\t\tthis.getMainContainer().login();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('Unable to retrieve FormPost.', e);\r\n\t\t}\r\n\t}\r\n\t/** Add the appropriate FORMELEMENT\r\n        @param {Array} inputs An array of inputs\r\n        @todo Include other inputs such as SELECT and TEXTAREA\r\n        @returns {void}\r\n    */\r\n\taddInputs(inputs) {\r\n\t\tif (inputs) {\r\n\t\t\tfor (let i = 0; i < inputs.length; i++) {\r\n\t\t\t\tlet inp = null;\r\n\t\t\t\tif (inputs[i].type === 'FORMPOSTINPUT' || inputs[i].data.type === 'FORMPOSTINPUT' || inputs[i].attributes.type === 'FORMPOSTINPUT') {\r\n\t\t\t\t\tinp = new FORMPOSTINPUT(this.form.fieldset.formElementGroup.body.pane, inputs[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinp = new FORMINPUT(this.form.fieldset.formElementGroup.body.pane, inputs[i]);\r\n\t\t\t\t}\r\n\t\t\t\tthis.form.fieldset.formElementGroup.children.push(inp);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** Opens a Modal Form populated with an open version of the FormPost\r\n        @returns {void}\r\n        @todo This is just ridiculously long and needs to be cleaned up\r\n    */\r\n\teditAttributes() {\r\n\t\tconsole.log('editattributes');\r\n\t\tlet id = parseInt(this.input.attributes.value);\r\n\t\tlet inputs = [\r\n\t\t\tnew MODEL(new ATTRIBUTES({\r\n\t\t\t\t'name': 'id',\r\n\t\t\t\t'value': id\r\n\t\t\t})).set({\r\n\t\t\t\t'element': 'INPUT',\r\n\t\t\t\t'type': 'FORMPOST',\r\n\t\t\t\t'label': 'id'\r\n\t\t\t})\r\n\t\t];\r\n\t\t// Test to see if the formpost can be retrieved\r\n\t\ttry {\r\n\t\t\t$.getJSON('/FORMPOST/Get/' + id, (data) => {\r\n\t\t\t\tif (data.model) { // If access granted...\r\n\t\t\t\t\tif (data.model.jsonResults) {\r\n\t\t\t\t\t\tif (typeof container === 'undefined') {\r\n\t\t\t\t\t\t\tconsole.log('Unable to retrieve parent container');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinputs = this.createInputArray(JSON.parse(data.model.jsonResults), this.getContainer(), inputs);\r\n\t\t\t\t\t\t\tthis.destroyForm();\r\n\t\t\t\t\t\t\tthis.createFormPostForm(inputs, data);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(0, 'An Exception Occurred', data.message);\r\n\t\t\t\t\tthis.getMainContainer().login();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(0, 'Unable to retrieve FormPost.', e);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Iterates through the parsed json results and creates\r\n\t    a collection of INPUTS\r\n\t    Appends parsed inputs to the given INPUT array\r\n\t    @param {object} parsed A json object converted to an object\r\n\t    @param {any} container This Container\r\n\t    @param {any} inputs An array of inputs\r\n\t    @returns {Array} An array of inputs\r\n\t*/\r\n\tcreateInputArray(parsed, container, inputs) {\r\n\t\t/*for (let i = 0; i < parsed.length; i++) {\r\n\t\t\tlet inp = parsed[i];\r\n\t\t\tif (inp.name !== 'id') {\r\n\t\t\t\tlet value = null;\r\n\t\t\t\tif (container[inp.name]) {\r\n\t\t\t\t\tif (container[inp.name].el) {\r\n\t\t\t\t\t\tvalue = container[inp.name].el.innerHTML;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalue = inp.value;\r\n\t\t\t\t}\r\n\t\t\t\tinputs.push(new MODEL(new ATTRIBUTES({\r\n\t\t\t\t\t'name': inp.name,\r\n\t\t\t\t\tvalue //inp.value\r\n\t\t\t\t})).set({\r\n\t\t\t\t\t'element': 'INPUT',\r\n\t\t\t\t\t'label': inp.name\r\n\t\t\t\t}));\r\n\t\t\t}\r\n        }*/\r\n\r\n        parsed.forEach((inp) => {\r\n            if (inp.name !== 'id') {\r\n                let value = null;\r\n                let param = container[inp.name];\r\n                if (param) {\r\n                    if (param.el) {\r\n                        value = param.el.innerHTML;\r\n                    }\r\n                } else {\r\n                    value = inp.value; //inp[value];\r\n                }\r\n                inputs.push(new MODEL(new ATTRIBUTES({\r\n                    'name': inp.name,\r\n                    value //inp.value\r\n                })).set({\r\n                    'element': 'INPUT',\r\n                    'label': inp.name\r\n                }));\r\n            }\r\n        });\r\n\r\n\t\treturn inputs;\r\n\t}\r\n\t/**\r\n\t    Attempts to destroy the form post form\r\n\t    @throws Throws an error if the form does not exist\r\n\t    @returns {void}\r\n\t*/\r\n\tdestroyForm() {\r\n\t\ttry {\r\n\t\t\tthis.form.destroy();\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn('Unable to destroy pre-existing form', e);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Creates an empty form and populates with any given inputs\r\n\t    @param {Array} inputs An array of INPUTS\r\n\t    @param {object} data Payload for FORMPOST/Get\r\n\t    @returns {FORM} A form representing this form post\r\n\t*/\r\n\tcreateFormPostForm(inputs, data) {\r\n\t\tthis.form = FORM.createEmptyForm();\r\n\t\tthis.form.label = 'Modify';\r\n\t\tthis.form.fieldset.formElementGroup.label = 'Attributes';\r\n\t\tthis.form.fieldset.formElementGroup.navBar.header.menu.getGroup('ELEMENTS').empty(); // Empty out and populate with Form Elements only    \r\n\t\tthis.addFormElementGroupContainerCase(['INPUT', 'SELECT', 'TEXTAREA']);\r\n\t\tthis.addInputs(inputs);\r\n\t\tthis.form.fieldset.formElementGroup.toggleHeaders(); // Show headers so that inputs can be modified\r\n\t\tthis.form.setPostUrl('FormPost/Set');\r\n\t\tthis.form.afterSuccessfulPost = () => { //console.log(100, 'Updated Attributes');            \r\n\t\t\tthis.updateInput(data.model.id);\r\n\t\t};\r\n\t\treturn this.form;\r\n\t}\r\n\t/**\r\n\t    Adds a Container Case for each item in the list\r\n\t    @param {any} arr An array of INPUT Types (ie: INPUT, SELECT, TEXTAREA)\r\n\t    @returns {void}\r\n\t*/\r\n\taddFormElementGroupContainerCase(arr) {\r\n\t\tfor (let i = 0; i < arr.length; i++) {\r\n\t\t\tthis.form.fieldset.formElementGroup.addContainerCase(arr[i]);\r\n\t\t}\r\n\t}\r\n}\r\nexport { ATTRIBUTES, EL, MODEL };"]}