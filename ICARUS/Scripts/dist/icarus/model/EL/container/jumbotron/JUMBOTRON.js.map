{"version":3,"sources":["model/EL/container/jumbotron/JUMBOTRON.js"],"names":["CONTAINER","ATTRIBUTES","EL","MODEL","DIV","HEADER","HR","P","JUMBOTRON","[object Object]","node","model","super","this","body","pane","addClass","dataId","screen","data","screencolor","el","setAttribute","header","set","label","p","length","hr","htmlDecode","loadBgImage","bgcolor","style","backgroundColor","bgimage","$","getJSON","parseInt","parsed","JSON","parse","jsonResults","name","value","ee","console","log","e"],"mappings":"OAGOA,WAAaC,WAAYC,GAAIC,UAAa,yBAC1CC,QAAS,0BACTC,WAAY,gCACZC,OAAQ,wBACRC,MAAO,8BASC,MAAMC,kBAAkBR,UAKtCS,YAAYC,EAAMC,GACjBC,MAAMF,EAAM,MAAOC,GACnBE,KAAKC,KAAKC,KAAKC,SAAS,aAKzBP,YACKI,KAAKI,OAAS,IACjBJ,KAAKK,OAAS,IAAId,IAAIS,KAAKC,KAAKC,KAAM,IAAIZ,MAAM,IAAIF,WAAW,YAC3DY,KAAKM,KAAKC,aAAyC,MAA1BP,KAAKM,KAAKC,aACtCP,KAAKK,OAAOG,GAAGC,aAAa,QAAS,qBAAuBT,KAAKM,KAAKC,YAAc,KAErFP,KAAKU,OAAS,IAAIlB,OAAOQ,KAAKK,QAAQ,IAAIf,OAAQqB,IAAI,CACrDC,MAASZ,KAAKM,KAAKI,SAChB,GACAV,KAAKM,KAAKO,GACTb,KAAKM,KAAKO,EAAEC,OAAS,IACxBd,KAAKe,GAAK,IAAItB,GAAGO,KAAKK,OAAQ,IAAIf,OAClCU,KAAKa,EAAI,IAAInB,EAAEM,KAAKK,OAAQ,IAAIf,MAASU,KAAKgB,WAAWhB,KAAKM,KAAKO,KAGrEb,KAAKiB,cACDjB,KAAKM,KAAKY,SAAiC,MAAtBlB,KAAKM,KAAKY,UAClClB,KAAKC,KAAKC,KAAKM,GAAGW,MAAMC,gBAAkBpB,KAAKM,KAAKY,UAOvDtB,cACC,GAA0B,MAAtBI,KAAKM,KAAKe,SAAyC,MAAtBrB,KAAKM,KAAKe,QAC1C,IACCC,EAAEC,QAAQ,iBAAmBC,SAASxB,KAAKM,KAAKe,SAAWf,IAC1D,IACC,IAAImB,EAASC,KAAKC,MAAMrB,EAAKR,MAAM8B,aAEnC,IAAK,IAAIf,EAAI,EAAGA,EAAIY,EAAOX,OAAQD,IACX,WAAnBY,EAAOZ,GAAGgB,MACb7B,KAAKC,KAAKC,KAAKM,GAAGC,aAAa,QAAS,mBAAqBgB,EAAOZ,GAAGiB,MAAQ,MAGhF,MAAOC,GACRC,QAAQC,IAAI,gDAAiDF,MAG9D,MAAOG,GACRF,QAAQC,IAAI,+BAAgCC,YAKvC9C,WAAYC,GAAIC","file":"JUMBOTRON.js","sourcesContent":["/**\r\n    @module\r\n*/\r\nimport CONTAINER, { ATTRIBUTES, EL, MODEL } from '../CONTAINER.js';\r\nimport DIV from '../../div/DIV.js';\r\nimport HEADER from '../../header/HEADER.js';\r\nimport HR from '../../hr/HR.js';\r\nimport P from '../../p/P.js';\r\n/**\r\n    A full width Container with a fixed height\r\n    @description A lightweight, flexible component that can optionally extend the entire \r\n    viewport to showcase key content on your site.\r\n    @see https://getbootstrap.com/docs/3.3/components/#jumbotron }\r\n    @class\r\n    @extends CONTAINER\r\n*/\r\nexport default class JUMBOTRON extends CONTAINER {\r\n\t/** Constructs a Bootstrap style Jumbotron\r\n        @param {CONTAINER} node The model\r\n        @param {MODEL} model Object Model        \r\n    */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, 'DIV', model);\r\n\t\tthis.body.pane.addClass('jumbotron');\r\n\t}\r\n\t/** Override abstract method\r\n        @returns {void}\r\n    */\r\n\tconstruct() {\r\n\t\tif (this.dataId > 0) {\r\n\t\t\tthis.screen = new DIV(this.body.pane, new MODEL(new ATTRIBUTES('screen')));\r\n\t\t\tif (this.data.screencolor && this.data.screencolor !== '.') {\r\n\t\t\t\tthis.screen.el.setAttribute('style', 'background-color: ' + this.data.screencolor + ';');\r\n\t\t\t}\r\n\t\t\tthis.header = new HEADER(this.screen, new MODEL().set({\r\n\t\t\t\t'label': this.data.header\r\n\t\t\t}), 1);\r\n\t\t\tif (this.data.p) {\r\n\t\t\t\tif (this.data.p.length > 0) {\r\n\t\t\t\t\tthis.hr = new HR(this.screen, new MODEL());\r\n\t\t\t\t\tthis.p = new P(this.screen, new MODEL(), this.htmlDecode(this.data.p));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.loadBgImage();\r\n\t\t\tif (this.data.bgcolor && this.data.bgcolor !== '.') {\r\n\t\t\t\tthis.body.pane.el.style.backgroundColor = this.data.bgcolor;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** Attempt to retrieve a background image if one is specified in this.data.bgimage\r\n        @returns {Promise<boolean>} Returns true on success\r\n    */\r\n\tloadBgImage() {\r\n\t\tif (this.data.bgimage !== '0' && this.data.bgimage !== '.') {\r\n\t\t\ttry {\r\n\t\t\t\t$.getJSON('/FORMPOST/Get/' + parseInt(this.data.bgimage), (data) => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tlet parsed = JSON.parse(data.model.jsonResults);\r\n\t\t\t\t\t\t//console.log('Parsed', parsed);\r\n\t\t\t\t\t\tfor (let p = 0; p < parsed.length; p++) { // Extract the base64 values and create an image\r\n\t\t\t\t\t\t\tif (parsed[p].name === 'base64') {\r\n\t\t\t\t\t\t\t\tthis.body.pane.el.setAttribute('style', 'background: url(' + parsed[p].value + ');');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (ee) {\r\n\t\t\t\t\t\tconsole.log('Unable to load background image for JUMBOTRON', ee);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log('Unable to retrieve FormPost.', e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nexport { ATTRIBUTES, EL, MODEL };"]}