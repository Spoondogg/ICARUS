{"version":3,"sources":["model/EL/container/jumbotron/JUMBOTRON.js"],"names":["CONTAINER","ATTRIBUTES","EL","MODEL","DIV","HEADER","P","JUMBOTRON","[object Object]","node","model","super","this","body","pane","addClass","dataId","screen","setScreenColor","header","set","label","data","createTextblock","loadBgImage","setBgColor","p","length","htmlDecode","e","console","log","bgimage","$","getJSON","parseInt","parsed","JSON","parse","jsonResults","name","el","setAttribute","value","ee","bgcolor","style","backgroundColor","screencolor"],"mappings":"OACOA,WAAaC,WAAYC,GAAIC,UAAa,yBAC1CC,QAAS,0BACTC,WAAY,gCACZC,MAAO,8BAMC,MAAMC,kBAAkBP,UAKtCQ,YAAYC,EAAMC,GACjBC,MAAMF,EAAM,MAAOC,GACnBE,KAAKC,KAAKC,KAAKC,SAAS,aAKzBP,YACKI,KAAKI,OAAS,IACjBJ,KAAKK,OAAS,IAAIb,IAAIQ,KAAKC,KAAKC,KAAM,IAAIX,MAAM,WACvCS,KAAKM,iBACdN,KAAKO,OAAS,IAAId,OAAOO,KAAKK,QAAQ,IAAId,OAAQiB,IAAI,CAAEC,MAAST,KAAKU,KAAKH,UAClEP,KAAKW,kBACdX,KAAKY,cACIZ,KAAKa,cAMbjB,kBACI,IACQI,KAAKU,KAAKI,EAAEC,OAAS,IACrBf,KAAKc,EAAI,IAAIpB,EAAEM,KAAKK,OAAQ,IAAId,MAASS,KAAKgB,WAAWhB,KAAKU,KAAKI,KAEzE,MAAOG,GACLC,QAAQC,IAAI,6BAA8BF,IAMrDrB,cACC,GAA0B,MAAtBI,KAAKU,KAAKU,SAAyC,MAAtBpB,KAAKU,KAAKU,QAC1C,IACCC,EAAEC,QAAQ,iBAAmBC,SAASvB,KAAKU,KAAKU,SAAWV,IAC1D,IACC,IAAIc,EAASC,KAAKC,MAAMhB,EAAKZ,MAAM6B,aACnC,IAAK,IAAIb,EAAI,EAAGA,EAAIU,EAAOT,OAAQD,IAClC,GAAuB,WAAnBU,EAAOV,GAAGc,KAAmB,CACR5B,KAAKC,KAAKC,KAAK2B,GAAGC,aAAa,QAAS,mBAAqBN,EAAOV,GAAGiB,MAAQ,MAC/E,OAGzB,MAAOC,GACRd,QAAQC,IAAI,gDAAiDa,MAG9D,MAAOf,GACRC,QAAQC,IAAI,+BAAgCF,IAO5CrB,aACQI,KAAKU,KAAKuB,SAAiC,MAAtBjC,KAAKU,KAAKuB,UAC/BjC,KAAKC,KAAKC,KAAK2B,GAAGK,MAAMC,gBAAkBnC,KAAKU,KAAKuB,SAM5DrC,iBACQI,KAAKU,KAAK0B,aAAyC,MAA1BpC,KAAKU,KAAK0B,aACnCpC,KAAKK,OAAOwB,GAAGC,aAAa,QAAS,qBAAuB9B,KAAKU,KAAK0B,YAAc,aAIvF/C,WAAYC,GAAIC","file":"JUMBOTRON.js","sourcesContent":["/** @module */\r\nimport CONTAINER, { ATTRIBUTES, EL, MODEL } from '../CONTAINER.js';\r\nimport DIV from '../../div/DIV.js';\r\nimport HEADER from '../../header/HEADER.js';\r\nimport P from '../../p/P.js';\r\n/** A full width Container with a fixed height\r\n    @see https://getbootstrap.com/docs/3.3/components/#jumbotron }\r\n    @class\r\n    @extends CONTAINER\r\n*/\r\nexport default class JUMBOTRON extends CONTAINER {\r\n\t/** Constructs a Bootstrap style Jumbotron\r\n        @param {CONTAINER} node The model\r\n        @param {MODEL} model Object Model        \r\n    */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, 'DIV', model);\r\n\t\tthis.body.pane.addClass('jumbotron');\r\n\t}\r\n\t/** Override abstract method\r\n        @returns {void}\r\n    */\r\n\tconstruct() {\r\n\t\tif (this.dataId > 0) {\r\n\t\t\tthis.screen = new DIV(this.body.pane, new MODEL('screen'));\r\n            this.setScreenColor();\r\n\t\t\tthis.header = new HEADER(this.screen, new MODEL().set({ 'label': this.data.header }));\r\n            this.createTextblock();\r\n\t\t\tthis.loadBgImage();\r\n            this.setBgColor();\r\n\t\t}\r\n    }\r\n    /** Creates the primary textblock for this Jumbotron \r\n        @returns {void}\r\n    */\r\n    createTextblock() {\r\n        try {\r\n            if (this.data.p.length > 0) {\r\n                this.p = new P(this.screen, new MODEL(), this.htmlDecode(this.data.p));\r\n            }\r\n        } catch (e) {\r\n            console.log('Unable to create textblock', e);\r\n        }\r\n    }\r\n\t/** Attempt to retrieve a background image if one is specified in this.data.bgimage\r\n        @returns {Promise<boolean>} Returns true on success\r\n    */\r\n\tloadBgImage() {\r\n\t\tif (this.data.bgimage !== '0' && this.data.bgimage !== '.') {\r\n\t\t\ttry {\r\n\t\t\t\t$.getJSON('/FORMPOST/Get/' + parseInt(this.data.bgimage), (data) => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tlet parsed = JSON.parse(data.model.jsonResults);\r\n\t\t\t\t\t\tfor (let p = 0; p < parsed.length; p++) { // Extract the base64 values and create an image\r\n\t\t\t\t\t\t\tif (parsed[p].name === 'base64') {\r\n                                this.body.pane.el.setAttribute('style', 'background: url(' + parsed[p].value + ');');\r\n                                break;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (ee) {\r\n\t\t\t\t\t\tconsole.log('Unable to load background image for JUMBOTRON', ee);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log('Unable to retrieve FormPost.', e);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    /** Sets the background color of the jumbotron pane \r\n        @returns {void}\r\n    */\r\n    setBgColor() {\r\n        if (this.data.bgcolor && this.data.bgcolor !== '.') {\r\n            this.body.pane.el.style.backgroundColor = this.data.bgcolor;\r\n        }\r\n    }\r\n    /** Sets the screen background color \r\n        @returns {void}\r\n    */\r\n    setScreenColor() {\r\n        if (this.data.screencolor && this.data.screencolor !== '.') {\r\n            this.screen.el.setAttribute('style', 'background-color: ' + this.data.screencolor + ';');\r\n        }\r\n    }\r\n}\r\nexport { ATTRIBUTES, EL, MODEL };"]}