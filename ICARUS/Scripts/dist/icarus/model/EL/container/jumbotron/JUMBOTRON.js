import CONTAINER,{ATTRIBUTES,EL,MODEL}from"../CONTAINER.js";import DIV from"../../div/DIV.js";import HEADER from"../../header/HEADER.js";import P from"../../p/P.js";export default class JUMBOTRON extends CONTAINER{constructor(e,t){super(e,"DIV",t),this.body.pane.addClass("jumbotron")}construct(){this.dataId>0&&(this.screen=new DIV(this.body.pane,new MODEL("screen")),this.setScreenColor(),this.header=new HEADER(this.screen,(new MODEL).set({label:this.data.header})),this.createTextblock(),this.loadBgImage(),this.setBgColor())}createTextblock(){try{this.data.p.length>0&&(this.p=new P(this.screen,new MODEL,this.htmlDecode(this.data.p)))}catch(e){console.log("Unable to create textblock",e)}}loadBgImage(){if("0"!==this.data.bgimage&&"."!==this.data.bgimage)try{$.getJSON("/FORMPOST/Get/"+parseInt(this.data.bgimage),e=>{try{let t=JSON.parse(e.model.jsonResults);for(let e=0;e<t.length;e++)if("base64"===t[e].name){this.body.pane.el.setAttribute("style","background: url("+t[e].value+");");break}}catch(e){console.log("Unable to load background image for JUMBOTRON",e)}})}catch(e){console.log("Unable to retrieve FormPost.",e)}}setBgColor(){this.data.bgcolor&&"."!==this.data.bgcolor&&(this.body.pane.el.style.backgroundColor=this.data.bgcolor)}setScreenColor(){this.data.screencolor&&"."!==this.data.screencolor&&this.screen.el.setAttribute("style","background-color: "+this.data.screencolor+";")}}export{ATTRIBUTES,EL,MODEL};
//# sourceMappingURL=JUMBOTRON.js.map
