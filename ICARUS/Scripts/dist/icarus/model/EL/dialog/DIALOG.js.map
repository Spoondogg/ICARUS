{"version":3,"sources":["model/EL/dialog/DIALOG.js"],"names":["EL","ATTRIBUTES","MODEL","BUTTON","DIV","FOOTER","HEADER","DIALOG","[object Object]","model","super","document","body","insertBefore","this","el","firstChild","header","setInnerHTML","text","footer","btnClose","onclick","close","delay","setTimeout","showModal","preserve","destroy"],"mappings":"OAGOA,IAAMC,WAAYC,UAAa,kBAC/BC,WAAY,6BACZC,QAAS,uBACTC,WAAY,6BACZC,WAAY,qCAUJ,MAAMC,eAAeP,GAMnCQ,YAAYC,GACLC,MAAMC,SAASC,KAAM,SAAUH,GAC/BE,SAASC,KAAKC,aAAaC,KAAKC,GAAIJ,SAASC,KAAKI,YACxDF,KAAKG,OAAS,IAAIX,OAAOQ,KAAM,IAAIZ,MAAM,iBACzCY,KAAKF,KAAO,IAAIR,IAAIU,KAAM,IAAIZ,MAAM,eACpCY,KAAKF,KAAKM,aAAaT,EAAMU,MAC7BL,KAAKM,OAAS,IAAIf,OAAOS,KAAM,IAAIZ,MAAM,iBACzCY,KAAKO,SAAW,IAAIlB,OAAOW,KAAKM,OAAQ,IAAIlB,OAC5CY,KAAKO,SAASN,GAAGO,QAAU,MAC1BR,KAAKS,UASPf,KAAKgB,EAAQ,GACNC,WAAW,KACPX,KAAKC,GAAGW,aACTF,GAQVhB,MAAMgB,EAAQ,EAAGG,GAAW,GACrBF,WAAW,KACPX,KAAKC,GAAGQ,QACHI,GACDb,KAAKc,WAEVJ,WAGFvB,WAAYG,IAAKJ,GAAIE","file":"DIALOG.js","sourcesContent":["/**\r\n    @module\r\n*/\r\nimport EL, { ATTRIBUTES, MODEL } from '../EL.js';\r\nimport BUTTON from '../button/BUTTON.js';\r\nimport DIV from '../div/DIV.js';\r\nimport FOOTER from '../footer/FOOTER.js';\r\nimport HEADER from '../header/HEADER.js';\r\n/**\r\n    An HTML5 Dialog Element (Only supported in Chrome as of 2018-09-28)\r\n    @class\r\n    @extends EL\r\n    @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\r\n    @see https://webdesign.tutsplus.com/tutorials/native-popups-and-modals-with-the-html5-dialog-element--cms-23876\r\n    @see https://github.com/GoogleChrome/dialog-polyfill\r\n    @see https://keithjgrant.com/posts/2018/01/meet-the-new-dialog-element/\r\n*/\r\nexport default class DIALOG extends EL {\r\n\t/**\r\n\t    Constructs a generic DIALOG Element\r\n\t    @constructs DIALOG\r\n\t    @param {MODEL} model The object model\r\n\t */\r\n\tconstructor(model) {\r\n        super(document.body, 'DIALOG', model);\r\n        document.body.insertBefore(this.el, document.body.firstChild);\r\n\t\tthis.header = new HEADER(this, new MODEL('modal-header'));\r\n\t\tthis.body = new DIV(this, new MODEL('modal-body'));\r\n\t\tthis.body.setInnerHTML(model.text);\r\n\t\tthis.footer = new FOOTER(this, new MODEL('modal-footer'));\r\n\t\tthis.btnClose = new BUTTON(this.footer, new MODEL());\r\n\t\tthis.btnClose.el.onclick = () => {\r\n\t\t\tthis.close();\r\n\t\t}\r\n\t\t//this.token = model.token;\r\n\t}\r\n\t/**\r\n\t    Makes modal appear (adds `open` attribute)\r\n        @param {number} delay Millisecond delay until dialog is shown\r\n\t    @returns {void}\r\n\t*/\r\n\tshow(delay = 0) {\r\n        setTimeout(() => {\r\n            this.el.showModal();\r\n        }, delay);\r\n\t}\r\n\t/**\r\n\t    Hides the modal\r\n        @param {number} delay Millisecond delay until dialog is closed\r\n        @param {boolean} preserve If true, element is not deleted\r\n\t    @returns {void}\r\n\t*/\r\n\tclose(delay = 0, preserve = false) {\r\n        setTimeout(() => {\r\n            this.el.close();\r\n            if (!preserve) {\r\n                this.destroy();\r\n            }\r\n        }, delay);\r\n\t}\r\n}\r\nexport { ATTRIBUTES, DIV, EL, MODEL };"]}