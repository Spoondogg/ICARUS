{"version":3,"sources":["model/EL/nav/menu/NAVHEADER.js"],"names":["MENU","MODEL","ICONS","SVG","NAVHEADER","[object Object]","node","model","super","this","logo","tabs","tab","addDefaultTab","label","addOptionsMenu","addNavItem","set","el","onclick","getContainer","toggleBody","pressTimer","onmousedown","ev","window","setTimeout","launchSidebarSave","stopPropagation","onmouseup","clearTimeout","getMainContainer","user","toggle","addNavItemIcon","icon","COG","toggleCollapse","bind","menu","name","optionGroups","oG","length","addMenu","collapsed","showHeader","e","modal","getProtoTypeByClass","console","warn","className","log","anchor","container","main","sidebar","empty","toggleSidebar","save","target","$","collapse"],"mappings":"OACOA,MAAQC,UAAa,yBACnBC,UAAa,oCACfC,QAAS,kCAKD,MAAMC,kBAAkBJ,KAKtCK,YAAYC,EAAMC,GACjBC,MAAMF,EAAMC,GACZE,KAAKC,KAAO,IAAIP,IAAIM,KAAM,YAAa,GAAI,QAC3CA,KAAKE,KAAO,IAAIX,KAAKS,KAAM,IAAIR,MAAM,SACrCQ,KAAKG,IAAMH,KAAKI,cAAcN,EAAMO,OACpCL,KAAKM,iBAMNV,cAAcS,GACb,IAAIF,EAAMH,KAAKE,KAAKK,WAAW,IAAIf,MAAM,YAAYgB,IAAI,CAC/CH,MAAAA,KAiBV,OAfAF,EAAIM,GAAGC,QAAU,MAChBV,KAAKW,eAAeC,eAErBT,EAAIU,WAAa,KACjBV,EAAIM,GAAGK,YAAc,CAACC,IACrBf,KAAKG,IAAIU,WAAaG,OAAOC,WAAW,KACvCjB,KAAKkB,oBACLH,EAAGI,mBACD,OAEJhB,EAAIM,GAAGW,UAAY,CAACL,IACnBM,aAAarB,KAAKG,IAAIU,YACtBE,EAAGI,mBACI,IAEDhB,EAORP,iBACC,IACC,GAAoD,UAAhDI,KAAKW,eAAeW,mBAAmBC,KAAkB,CAC5DvB,KAAKwB,OAASxB,KAAKE,KAAKuB,eAAe,IAAIjC,MAAM,cAAcgB,IAAI,CACnDkB,KAAQjC,MAAMkC,OAG9B3B,KAAKwB,OAAOf,GAAGC,QAAUV,KAAK4B,eAAeC,KAAK7B,MAClDA,KAAK8B,KAAO,IAAIvC,KAAKS,KAAM,IAAIR,MAAM,YAAYgB,IAAI,CACpDuB,KAAQ,UAET,IAAIC,EAAe,CAAC,WAAY,OAAQ,OACxC,IAAK,IAAIC,EAAK,EAAGA,EAAKD,EAAaE,OAAQD,IAC1CjC,KAAK8B,KAAKK,QAAQ,IAAI3C,MAAM,uBAAuBgB,IAAI,CACtDuB,KAAQC,EAAaC,GACHG,UAAa,EACbC,WAAc,MAIlC,MAAOC,GACR,IAAIC,EAAQvC,KAAKwC,oBAAoB,SACrC,GAAc,OAAVD,EAEH,MADAE,QAAQC,KAAK,oCAAqCJ,GAC5CA,EAEN,OAAQC,EAAMI,WACb,IAAK,SACL,IAAK,SACJ,MACD,QACCF,QAAQC,KAAK1C,KAAK2C,UAAY,+CAAgDJ,KAUnF3C,oBACC,IACC6C,QAAQG,IAAI,gBAAkB5C,KAAKG,IAAI0C,OAAOxC,OAC9C,IAAIyC,EAAY9C,KAAKW,eACjBoC,EAAOD,EAAUxB,mBACrByB,EAAKC,QAAQC,QACbF,EAAKG,gBACLJ,EAAUK,KAAKJ,EAAKC,SACpBD,EAAKK,OAASN,EACb,MAAOR,GACRG,QAAQC,KAAKJ,IAMf1C,iBACCyD,EAAErD,KAAK8B,KAAKrB,IAAI6C,SAAS","file":"NAVHEADER.js","sourcesContent":["/** @module */\r\nimport MENU, { MODEL } from '../menu/MENU.js';\r\nimport { ICONS } from '../../../../enums/ICONS.js';\r\nimport SVG from '../../svg/SVG.js';\r\n/** An expandable menu with clickable header that opens a container full of icons\r\n    @class\r\n    @extends MENU\r\n*/\r\nexport default class NAVHEADER extends MENU {\r\n\t/** Construct a Nav Header.\r\n\t    @param {EL} node The object that the navHeader is appended to\r\n\t    @param {MODEL} model Object model\r\n\t */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, model);\r\n\t\tthis.logo = new SVG(this, '0 0 32 32', '', '#CCC');\r\n\t\tthis.tabs = new MENU(this, new MODEL('tabs'));\r\n\t\tthis.tab = this.addDefaultTab(model.label);\r\n\t\tthis.addOptionsMenu();\r\n\t}\r\n\t/** Adds the default toggle tab for this MENU\r\n\t    @param {string} label The tab label\r\n\t    @returns {NAVITEM} A Default Tab\r\n\t*/\r\n\taddDefaultTab(label) {\r\n\t\tlet tab = this.tabs.addNavItem(new MODEL('wide-tab').set({\r\n            label\r\n\t\t}));\r\n\t\ttab.el.onclick = () => { // Toggle Body\r\n\t\t\tthis.getContainer().toggleBody();\r\n\t\t};\r\n\t\ttab.pressTimer = null; // Simulate LONG CLICK to edit the label\r\n\t\ttab.el.onmousedown = (ev) => {\r\n\t\t\tthis.tab.pressTimer = window.setTimeout(() => {\r\n\t\t\t\tthis.launchSidebarSave();\r\n\t\t\t\tev.stopPropagation();\r\n\t\t\t}, 1000);\r\n\t\t};\r\n\t\ttab.el.onmouseup = (ev) => {\r\n\t\t\tclearTimeout(this.tab.pressTimer);\r\n\t\t\tev.stopPropagation();\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\treturn tab;\r\n\t}\r\n\t/** Adds the Options/Config menu to the NavHeader.\r\n        Adds a right aligned tab to show/hide the Options Menu\r\n        @throws Throws an error if this NAVHEADER is not a child of a valid CONTAINER or MODAL\r\n        @returns {void}\r\n    */\r\n\taddOptionsMenu() {\r\n\t\ttry {\r\n\t\t\tif (this.getContainer().getMainContainer().user !== 'Guest') {\r\n\t\t\t\tthis.toggle = this.tabs.addNavItemIcon(new MODEL('pull-right').set({\r\n                    'icon': ICONS.COG//,\r\n                    //'label': 'OPTIONS'\r\n\t\t\t\t}));\r\n\t\t\t\tthis.toggle.el.onclick = this.toggleCollapse.bind(this);\r\n\t\t\t\tthis.menu = new MENU(this, new MODEL('collapse').set({ // Create the submenu to be toggled\r\n\t\t\t\t\t'name': 'menu'\r\n\t\t\t\t}));\r\n\t\t\t\tlet optionGroups = ['ELEMENTS', 'CRUD', 'DOM']; //'USER' // Add Default OPTIONS groupings as HORIZONTAL menus\r\n\t\t\t\tfor (let oG = 0; oG < optionGroups.length; oG++) {\r\n\t\t\t\t\tthis.menu.addMenu(new MODEL('horizontal collapse').set({\r\n\t\t\t\t\t\t'name': optionGroups[oG],\r\n                        'collapsed': 1, // Do not remove these!\r\n                        'showHeader': 1\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tlet modal = this.getProtoTypeByClass('MODAL');\r\n\t\t\tif (modal === null) {\r\n\t\t\t\tconsole.warn('Unable to retrieve MAIN Container', e);\r\n\t\t\t\tthrow e;\r\n\t\t\t} else {\r\n\t\t\t\tswitch (modal.className) {\r\n\t\t\t\t\tcase 'LOADER':\r\n\t\t\t\t\tcase 'PROMPT':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.warn(this.className + ' exists inside an unrecognized Modal window.', modal);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** Clears the Main sidebar is cleared and populated with\r\n\t\ta save form for this Container\r\n\t    @returns {void}\r\n\t*/\r\n\tlaunchSidebarSave() {\r\n\t\ttry {\r\n\t\t\tconsole.log('Long Clicked ' + this.tab.anchor.label);\r\n\t\t\tlet container = this.getContainer();\r\n\t\t\tlet main = container.getMainContainer();\r\n\t\t\tmain.sidebar.empty();\r\n\t\t\tmain.toggleSidebar();\r\n\t\t\tcontainer.save(main.sidebar);\r\n\t\t\tmain.target = container;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.warn(e);\r\n\t\t}\r\n\t}\r\n\t/**\tShow/Hide this.menu\r\n\t    @returns {void}\r\n\t*/\r\n\ttoggleCollapse() {\r\n\t\t$(this.menu.el).collapse('toggle');\r\n\t}\r\n}"]}