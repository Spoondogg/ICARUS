{"version":3,"sources":["model/EL/form/FORM.js"],"names":["CONTAINER","ATTRIBUTES","ICONS","INPUTTYPES","MODEL","FIELDSET","FORMELEMENTGROUP","FORMFOOTER","FORMINPUT","FORMINPUTTOKEN","FORMPOST","FORM","[object Object]","node","model","super","this","tokenInput","set","value","getToken","setPostUrl","updateUrl","fieldsets","footer","body","buttonGroup","addButton","SAVE","el","onclick","post","bind","populate","children","hidden","form","style","label","fieldset","pane","formElementGroup","document","getElementsByTagName","token","content","url","postUrl","i","length","disabled","e","console","log","TypeError","warn","element","elements","type","toUpperCase","htmlEncode","payload","isValid","focus","setAttribute","$","previousSibling","addClass","htmlEncodeValues","formName","name","checkValidity","setInvalid","removeClass","required","checked","selectedIndex","removeAttribute","reset","serializeArray","validate","formPost","getFormPost","lock","ajax","data","xhr","statusText","errorThrown","status","statusCode","response","message","success","unlock","afterSuccessfulPost","getMainContainer","loader","showConsole"],"mappings":"OAGOA,WAAaC,WAAYC,MAAOC,WAAYC,UAAa,mCACzDC,aAAc,iCACdC,qBAAsB,sDACtBC,eAAgB,yBAChBC,cAAe,yDACfC,mBAAoB,6EACpBC,aAAc,+BAON,MAAMC,aAAaX,UAKjCY,YAAYC,EAAMC,GACjBC,MAAMF,EAAM,OAAQC,EAAO,CAAC,aAC5BE,KAAKC,WAAa,IAAIR,eAAeO,MAAM,IAAIZ,OAAQc,IAAI,CAAEC,MAASH,KAAKI,cAC3EJ,KAAKK,WAAW,eAChBL,KAAKM,UAAY,cAIjBN,KAAKO,UAAY,GACjBP,KAAKQ,OAAS,IAAIjB,WAAWS,KAAKS,KAAM,IAAIrB,OAC5CY,KAAKQ,OAAOE,YAAYC,UAAU,SAAUzB,MAAM0B,MAAMC,GAAGC,QAAUd,KAAKe,KAAKC,KAAKhB,MACpFA,KAAKiB,SAASnB,EAAMoB,UAErBtB,aAMAA,uBAAuBC,EAAMsB,GAAS,GACrC,IAAIC,EAAO,IAAIzB,KAAKE,EAAM,IAAIT,MAAM,IAAIH,WAAW,CAClDoC,MAASF,EAAS,gBAAkB,MACjCjB,IAAI,CACPoB,MAAS,UAQV,OANAF,EAAKG,SAAW,IAAIlC,SAAS+B,EAAKX,KAAKe,MAAM,IAAIpC,OAAQc,IAAI,CAC5DoB,MAAS,cAEVF,EAAKG,SAASE,iBAAmB,IAAInC,iBAAiB8B,EAAKG,SAASd,KAAKe,MAAM,IAAIpC,OAAQc,IAAI,CAC9FoB,MAAS,sBAEHF,EAMLxB,WACI,OAAO8B,SAASC,qBAAqB,QAAQC,MAAMC,QAO1DjC,WAAWkC,GAEV,OADA9B,KAAK+B,QAAUD,EACR9B,KAKRJ,OACC,IACC,IAAK,IAAIoC,EAAI,EAAGA,EAAIhC,KAAKkB,SAASe,OAAQD,IACzChC,KAAKkB,SAASc,GAAGnB,GAAGqB,UAAW,EAEhC,OAAO,EACN,MAAOC,GAER,MADAC,QAAQC,IAAI,4BACNF,GAMRvC,SACC,IAAK,IAAIoC,EAAI,EAAGA,EAAIhC,KAAKkB,SAASe,OAAQD,IACzC,IACChC,KAAKkB,SAASc,GAAGnB,GAAGqB,UAAW,EAC9B,MAAOC,GACR,KAAIA,aAAaG,WAGhB,MAAMH,EAFNC,QAAQG,KAAK,mBAAqBvC,KAAKkB,SAASc,GAAGQ,QAAU,MAUjE5C,mBACC,IACC,IAAK,IAAIuC,EAAI,EAAGA,EAAInC,KAAKa,GAAG4B,SAASR,OAAQE,IAEG,SAA3CnC,KAAKa,GAAG4B,SAASN,GAAGO,KAAKC,eAAuE,aAA3C3C,KAAKa,GAAG4B,SAASN,GAAGO,KAAKC,gBACjF3C,KAAKa,GAAG4B,SAASN,GAAGhC,MAAQH,KAAK4C,WAAW5C,KAAKa,GAAG4B,SAASN,GAAGhC,QAGjE,MAAOgC,GAER,MADAC,QAAQC,IAAI,mCACNF,GAORvC,WAAW4C,GACVxC,KAAK6C,QAAQC,SAAU,EACvBN,EAAQO,QACRP,EAAQQ,aAAa,aAAchD,KAAK6C,QAAQC,SAChDG,EAAET,EAAQU,iBAAiBC,SAAS,WAQrCvD,WACCI,KAAKoD,mBACLpD,KAAK6C,QAAU,CACdC,SAAS,EACTO,SAAUrD,KAAKa,GAAGyC,MAEnB,IAAK,IAAInB,EAAI,EAAGA,EAAInC,KAAKa,GAAG4B,SAASR,OAAQE,IAC5C,OAAQnC,KAAKa,GAAG4B,SAASN,GAAGO,MAC3B,IAAK,QACL,IAAK,OACL,IAAK,QACL,IAAK,MACL,IAAK,WACJ,GAAI1C,KAAKa,GAAG4B,SAASN,GAAGoB,gBAAiB,CACN,KAA9BvD,KAAKa,GAAG4B,SAASN,GAAGhC,MACvBH,KAAKwD,WAAWxD,KAAKa,GAAG4B,SAASN,KAEjCc,EAAEjD,KAAKa,GAAG4B,SAASN,IAAIsB,YAAY,WACnCzD,KAAKa,GAAG4B,SAASN,GAAGa,aAAa,aAAchD,KAAK6C,QAAQC,UAE7D,MAEAV,QAAQC,IAAIrC,KAAKa,GAAG4B,SAASN,GAAGmB,KAAO,gBAAkBtD,KAAKa,GAAG4B,SAASN,GAAGoB,iBAC7EvD,KAAKwD,WAAWxD,KAAKa,GAAG4B,SAASN,IACjC,MAEU,IAAK,WACD,GAAInC,KAAKa,GAAG4B,SAASN,GAAGuB,WACf1D,KAAKa,GAAG4B,SAASN,GAAGwB,QAAS,CAC9B3D,KAAKwD,WAAWxD,KAAKa,GAAG4B,SAASN,IACjC,MAGR,MACJ,IAAK,aAC0B,IAAtCnC,KAAKa,GAAG4B,SAASN,GAAGyB,cACvB5D,KAAKwD,WAAWxD,KAAKa,GAAG4B,SAASN,KAEjCc,EAAEjD,KAAKa,GAAG4B,SAASN,IAAIsB,YAAY,WACnCzD,KAAKa,GAAG4B,SAASN,GAAGa,aAAa,aAAchD,KAAK6C,QAAQC,UAE7D,MACD,QACCV,QAAQG,KAAK,sDAIhB,OADAH,QAAQC,IAAI,sBAAwBrC,KAAK6C,QAAQC,SAC1C9C,KAAK6C,QAKbjD,QACCwC,QAAQC,IAAI,kBAAoBrC,KAAKa,GAAGyC,KAAO,KAC/C,IAAK,IAAInB,EAAI,EAAGA,EAAInC,KAAKa,GAAG4B,SAASR,OAAQE,IAC5CnC,KAAKa,GAAG4B,SAASN,GAAG0B,gBAAgB,cACpCZ,EAAEjD,KAAKa,GAAG4B,SAASN,GAAGe,iBAAiBO,YAAY,WAEpDzD,KAAKa,GAAGiD,QAMTlE,oBAEC,OADAwC,QAAQC,IAAI,4BACLY,EAAEjD,KAAKa,IAAIkD,iBAMnBnE,cACC,OAAOI,KAAKgE,WAAWlB,QAAU,IAAIpD,SAASM,MAAQ,KAUvDJ,OACCwC,QAAQC,IAAI,GAAI,6BAA+BrC,KAAK+B,SACpD,IAAIkC,EAAWjE,KAAKkE,cAChBD,GACHjE,KAAKmE,OACL/B,QAAQC,IAAI,eAAiBrC,KAAK+B,QAASkC,GAC3ChB,EAAEmB,KAAK,CACNtC,IAAK9B,KAAK+B,QACVW,KAAM,OACN2B,KAAMJ,EACNrE,MAAM0E,EAAKC,EAAYC,GACtBpC,QAAQC,IAAI,IAAK,kBAAoBkC,EAAa,IAAMD,EAAIG,OAAS,IAAKD,IAE3EE,WAAY,CACX9E,IAAI+E,GACHvC,QAAQC,IAAI,kBAAmBsC,EAASC,SAAS,IAElDhF,IAAI+E,GACHvC,QAAQC,IAAI,kBAAmBsC,IAEhC/E,IAAI+E,GACHvC,QAAQC,IAAI,kBAAmBsC,IAEhC/E,IAAI+E,GACHvC,QAAQC,IAAI,kBAAmB,oCAAqCsC,IAGrE/E,IAAI+E,GACHvC,QAAQC,IAAI,kBAAmBsC,KAGjCE,QAAUhC,IACTT,QAAQC,IAAI,4BAA6BQ,EAAQ+B,SACjD5E,KAAK8E,SACL9E,KAAK+E,oBAAoBlC,QAI3BT,QAAQC,IAAI,EAAG,kDACfrC,KAAKgF,mBAAmBC,OAAOC,eAYjCtF,wBAAwB4C,EAASc,EAAMhC,EAAOnB,EAAQ,GAAIuC,EAAO,QAChE,OAAO,IAAItD,MAAM,IAAIH,WAAW,CAC/BqE,KAAAA,EACAnD,MAAAA,EACAuC,KAAiB,kBAATA,EAA2B,SAAWA,KAC3CxC,IAAI,CACPsC,QAAAA,EACAlB,MAAAA,EACAoB,KAAAA,YAIMzD,WAAYM,WAAYC,UAAWE,SAAUP,WAAYC","file":"FORM.js","sourcesContent":["/**\r\n    @module\r\n*/\r\nimport CONTAINER, { ATTRIBUTES, ICONS, INPUTTYPES, MODEL } from '../container/CONTAINER.js';\r\nimport FIELDSET from '../fieldset/FIELDSET.js';\r\nimport FORMELEMENTGROUP from '../container/formelement/FORMELEMENTGROUP.js';\r\nimport FORMFOOTER from './FORMFOOTER.js';\r\nimport FORMINPUT from '../container/formelement/forminput/FORMINPUT.js';\r\nimport FORMINPUTTOKEN from '../container/formelement/forminput/forminputtoken/FORMINPUTTOKEN.js';\r\nimport FORMPOST from './FORMPOST.js';\r\n/** Constructs an Icarus Form Object\r\n    @description An FORM is the underlying form data type for all other page constructors\r\n    and is designed to submit an XML object for Object States.\r\n    @class\r\n    @extends CONTAINER\r\n*/\r\nexport default class FORM extends CONTAINER {\r\n\t/** Constructs a Form for collecting and posting\r\n\t    @param {CONTAINER} node The parent object\r\n\t    @param {MODEL} model The object model\r\n\t */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, 'FORM', model, ['FIELDSET']);\r\n\t\tthis.tokenInput = new FORMINPUTTOKEN(this, new MODEL().set({ 'value': this.getToken() }));\r\n\t\tthis.setPostUrl('Form/Submit');\r\n\t\tthis.updateUrl = 'Form/Update';\r\n\t\t/** \r\n\t\t    @param {Array<FIELDSET>} \r\n\t\t*/\r\n\t\tthis.fieldsets = [];\r\n\t\tthis.footer = new FORMFOOTER(this.body, new MODEL());\r\n\t\tthis.footer.buttonGroup.addButton('Submit', ICONS.SAVE).el.onclick = this.post.bind(this);\r\n\t\tthis.populate(model.children);\r\n\t}\r\n\tconstruct() {}\r\n\t/** Populates this form with a single fieldset and formelementgroup\r\n\t    @param {EL} node Parent node\r\n\t    @param {boolean} hidden If true, form is hidden\r\n\t    @returns {FORM} An empty form container\r\n\t*/\r\n\tstatic createEmptyForm(node, hidden = false) {\r\n\t\tlet form = new FORM(node, new MODEL(new ATTRIBUTES({\r\n\t\t\t'style': hidden ? 'display:none;' : ''\r\n\t\t})).set({\r\n\t\t\t'label': 'FORM'\r\n\t\t}));\r\n\t\tform.fieldset = new FIELDSET(form.body.pane, new MODEL().set({\r\n\t\t\t'label': 'FIELDSET'\r\n\t\t}));\r\n\t\tform.fieldset.formElementGroup = new FORMELEMENTGROUP(form.fieldset.body.pane, new MODEL().set({\r\n\t\t\t'label': 'FORMELEMENTGROUP'\r\n\t\t}));\r\n\t\treturn form;\r\n    }\r\n    /**\r\n        Retrieves the token value from the DOM Meta tags\r\n        @returns {string} A request verification token\r\n    */\r\n    getToken() {\r\n        return document.getElementsByTagName('meta').token.content;\r\n    }\r\n\t/**\r\n        Sets the POST url for this form\r\n        @param {string} url Target url\r\n        @returns {ThisType} Returns this form\r\n    */\r\n\tsetPostUrl(url) {\r\n\t\tthis.postUrl = url;\r\n\t\treturn this;\r\n\t}\r\n\t/** Disables all fieldsets within this form\r\n\t    @returns {boolean} Returns true if successful\r\n\t*/\r\n\tlock() {\r\n\t\ttry {\r\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\r\n\t\t\t\tthis.children[i].el.disabled = true;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('Unable to lock this form');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\t/** Enables all fieldsets within this form\r\n\t    @returns {boolean} Returns true if successful\r\n\t*/\r\n\tunlock() {\r\n\t\tfor (let i = 0; i < this.children.length; i++) {\r\n\t\t\ttry {\r\n\t\t\t\tthis.children[i].el.disabled = false;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (e instanceof TypeError) {\r\n\t\t\t\t\tconsole.warn('Unable to lock \"' + this.children[i].element + '\"');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** HTML encodes all form element values\r\n\t    @returns {void}\r\n\t*/\r\n\thtmlEncodeValues() {\r\n\t\ttry {\r\n\t\t\tfor (let e = 0; e < this.el.elements.length; e++) {\r\n\t\t\t\t//console.log('Encode type: ' + this.el.elements[e].type);\r\n\t\t\t\tif (this.el.elements[e].type.toUpperCase() === 'TEXT' || this.el.elements[e].type.toUpperCase() === 'TEXTAREA') {\r\n\t\t\t\t\tthis.el.elements[e].value = this.htmlEncode(this.el.elements[e].value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('FORM.htmlEncodeValues() failed.');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\t/** Flags the given element as invalid \r\n\t\t@param {any} element The form element\r\n\t    @returns {void}\r\n\t*/\r\n\tsetInvalid(element) {\r\n\t\tthis.payload.isValid = false;\r\n\t\telement.focus();\r\n\t\telement.setAttribute('data-valid', this.payload.isValid);\r\n\t\t$(element.previousSibling).addClass('invalid'); // Set label class to 'invalid'\r\n\t}\r\n\t/** Validate the current form and return true if form is valid\r\n\t    Note that this is a simple form of validation that occurs on the\r\n\t    client side and should not be used as a substitution for\r\n\t    server side validation.\r\n\t    @returns {object} The validation payload\r\n\t*/\r\n\tvalidate() {\r\n\t\tthis.htmlEncodeValues();\r\n\t\tthis.payload = {\r\n\t\t\tisValid: true,\r\n\t\t\tformName: this.el.name\r\n\t\t};\r\n\t\tfor (let e = 0; e < this.el.elements.length; e++) {\r\n\t\t\tswitch (this.el.elements[e].type) {\r\n\t\t\t\tcase 'input':\r\n\t\t\t\tcase 'text':\r\n\t\t\t\tcase 'email':\r\n\t\t\t\tcase 'tel':\r\n\t\t\t\tcase 'password':\r\n\t\t\t\t\tif (this.el.elements[e].checkValidity()) { // HTML5 Validation\r\n\t\t\t\t\t\tif (this.el.elements[e].value === '') {\r\n\t\t\t\t\t\t\tthis.setInvalid(this.el.elements[e]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$(this.el.elements[e]).removeClass('invalid');\r\n\t\t\t\t\t\t\tthis.el.elements[e].setAttribute('data-valid', this.payload.isValid);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(this.el.elements[e].name + ' -- isValid: ' + this.el.elements[e].checkValidity());\r\n\t\t\t\t\t\tthis.setInvalid(this.el.elements[e]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n                case 'checkbox':\r\n                    if (this.el.elements[e].required) {\r\n                        if (!this.el.elements[e].checked) {\r\n                            this.setInvalid(this.el.elements[e]);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'select-one':\r\n\t\t\t\t\tif (this.el.elements[e].selectedIndex === 0) {\r\n\t\t\t\t\t\tthis.setInvalid(this.el.elements[e]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$(this.el.elements[e]).removeClass('invalid');\r\n\t\t\t\t\t\tthis.el.elements[e].setAttribute('data-valid', this.payload.isValid);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn('Unable to validate unidentified form element type.');\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log('Validation Result: ' + this.payload.isValid);\r\n\t\treturn this.payload;\r\n\t}\r\n\t/** Resets the form and any validation notifications.\r\n        @returns {void}\r\n\t*/\r\n\treset() {\r\n\t\tconsole.log('Resetting form[' + this.el.name + ']');\r\n\t\tfor (let e = 0; e < this.el.elements.length; e++) {\r\n\t\t\tthis.el.elements[e].removeAttribute('data-valid');\r\n\t\t\t$(this.el.elements[e].previousSibling).removeClass('invalid');\r\n\t\t}\r\n\t\tthis.el.reset();\r\n\t}\r\n\t/**\r\n\t    Serialize the form into an array\r\n\t    @returns {array} Form Results as an Array of key/value pairs\r\n\t*/\r\n\tgetResultsAsArray() {\r\n\t\tconsole.log('FORM.getResultsAsArray()');\r\n\t\treturn $(this.el).serializeArray();\r\n\t}\r\n\t/**\r\n\t    If valid, Returns a FormPost based on values in this form\r\n\t    @returns {FormPost} A FormPost Object\r\n\t*/\r\n\tgetFormPost() {\r\n\t\treturn this.validate().isValid ? new FORMPOST(this) : null;\r\n\t}\r\n\t/** Post values to server.\r\n\t\tPosts the contents of the given Form Post to the specified url\r\n\t\tand updates the given prompt.\r\n\t\tparam {CONTAINER} master The master element whos state and id is to be updated\r\n\t    @async\r\n\t    @returns {Promise<object>} The results of the Form Post\r\n\r\n\t*/\r\n\tpost() {\r\n\t\tconsole.log(10, 'Posting values to server: ' + this.postUrl);\r\n\t\tlet formPost = this.getFormPost();\r\n\t\tif (formPost) {\r\n\t\t\tthis.lock();\r\n\t\t\tconsole.log('Posting to: ' + this.postUrl, formPost);\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: this.postUrl,\r\n\t\t\t\ttype: 'POST',\r\n\t\t\t\tdata: formPost,\r\n\t\t\t\terror(xhr, statusText, errorThrown) {\r\n\t\t\t\t\tconsole.log(100, 'Access Denied: ' + statusText + '(' + xhr.status + ')', errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tstatusCode: {\r\n\t\t\t\t\t200(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 200', response.message, true);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t201(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 201', response);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t400(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 400', response);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t403(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 403', 'Access Denied. Log in to continue', response);\r\n\t\t\t\t\t\t//app.login();\r\n\t\t\t\t\t},\r\n\t\t\t\t\t404(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 404', response);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tsuccess: (payload) => {\r\n\t\t\t\t\tconsole.log('Posted results to server.', payload.message);\r\n\t\t\t\t\tthis.unlock();\r\n\t\t\t\t\tthis.afterSuccessfulPost(payload);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(0, 'Post Failed to submit.  Values may be invalid.');\r\n\t\t\tthis.getMainContainer().loader.showConsole();\r\n\t\t}\r\n\t}\r\n\t/** Creates an Input Model\r\n        @static\r\n\t    @param {string} element Element name\r\n\t    @param {string} name Input name\r\n\t    @param {string} label Label to display\r\n\t    @param {string} value Value of input\r\n\t    @param {string} type The input type\r\n\t    @returns {MODEL} An input model\r\n\t */\r\n\tstatic createInputModel(element, name, label, value = '', type = 'TEXT') {\r\n\t\treturn new MODEL(new ATTRIBUTES({\r\n\t\t\tname,\r\n\t\t\tvalue,\r\n\t\t\t'type': type === 'FORMPOSTINPUT' ? 'NUMBER' : type\r\n\t\t})).set({\r\n\t\t\telement,\r\n\t\t\tlabel,\r\n\t\t\ttype\r\n\t\t})\r\n\t}\r\n}\r\nexport { ATTRIBUTES, FORMFOOTER, FORMINPUT, FORMPOST, INPUTTYPES, MODEL };"]}