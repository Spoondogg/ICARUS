{"version":3,"sources":["model/EL/form/FORM.js"],"names":["CONTAINER","ATTRIBUTES","ICONS","INPUTTYPES","MODEL","FIELDSET","FORMELEMENTGROUP","FORMFOOTER","FORMINPUT","FORMINPUTTOKEN","FORMPOST","FORM","[object Object]","node","model","super","this","tokenInput","set","token","setPostUrl","updateUrl","fieldsets","footer","body","buttonGroup","addButton","SAVE","el","onclick","post","bind","populate","children","hidden","form","style","label","showHeader","fieldset","pane","formElementGroup","url","postUrl","i","length","disabled","e","console","log","TypeError","warn","element","elements","type","value","htmlEncode","payload","isValid","focus","setAttribute","$","previousSibling","addClass","htmlEncodeValues","formName","name","checkValidity","setInvalid","removeClass","selectedIndex","removeAttribute","reset","serializeArray","validate","formPost","getFormPost","lock","ajax","data","xhr","statusText","errorThrown","status","statusCode","response","message","success","unlock","afterSuccessfulPost","getMainContainer","loader","showConsole"],"mappings":"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","file":"FORM.js","sourcesContent":["/**\r\n    @module\r\n*/\r\nimport CONTAINER, { ATTRIBUTES, ICONS, INPUTTYPES, MODEL } from '../container/CONTAINER.js';\r\nimport FIELDSET from '../fieldset/FIELDSET.js';\r\nimport FORMELEMENTGROUP from '../container/formelement/FORMELEMENTGROUP.js';\r\nimport FORMFOOTER from './FORMFOOTER.js';\r\nimport FORMINPUT from '../container/formelement/forminput/FORMINPUT.js';\r\nimport FORMINPUTTOKEN from '../container/formelement/forminput/forminputtoken/FORMINPUTTOKEN.js';\r\nimport FORMPOST from './FORMPOST.js';\r\n/**\r\n    Constructs an Icarus Form Object\r\n    @description An FORM is the underlying form data type for all other page constructors\r\n    and is designed to submit an XML object for Object States.\r\n\r\n    @class\r\n    @extends CONTAINER\r\n*/\r\nexport default class FORM extends CONTAINER {\r\n\t/**\r\n\t    Constructs a Form for collecting and posting\r\n\t    @param {CONTAINER} node The parent object\r\n\t    @param {MODEL} model The object model\r\n\t */\r\n\tconstructor(node, model) {\r\n\t\tsuper(node, 'FORM', model, ['FIELDSET']);\r\n\t\tthis.tokenInput = new FORMINPUTTOKEN(this, new MODEL().set({ 'token': '' })); //this.getMainContainer().getToken()\r\n\t\tthis.setPostUrl('Form/Submit');\r\n\t\tthis.updateUrl = 'Form/Update';\r\n\t\t/** \r\n\t\t    @param {Array<FIELDSET>} \r\n\t\t*/\r\n\t\tthis.fieldsets = [];\r\n\t\tthis.footer = new FORMFOOTER(this.body, new MODEL());\r\n\t\tthis.footer.buttonGroup.addButton('Submit', ICONS.SAVE).el.onclick = this.post.bind(this);\r\n\t\tthis.populate(model.children);\r\n\t}\r\n\tconstruct() {}\r\n\t/**\r\n\t    Populates this form with a single fieldset and formelementgroup\r\n\t    @param {EL} node Parent node\r\n\t    @param {boolean} hidden If true, form is hidden\r\n\t    @returns {FORM} An empty form container\r\n\t*/\r\n\tstatic createEmptyForm(node, hidden = false) {\r\n\t\tlet form = new FORM(node, new MODEL(new ATTRIBUTES({\r\n\t\t\t'style': hidden ? 'display:none;' : ''\r\n\t\t})).set({\r\n\t\t\t'label': 'FORM',\r\n\t\t\t'showHeader': 0\r\n\t\t}));\r\n\t\tform.fieldset = new FIELDSET(form.body.pane, new MODEL().set({\r\n\t\t\t'label': 'FIELDSET',\r\n\t\t\t'showHeader': 0\r\n\t\t}));\r\n\t\tform.fieldset.formElementGroup = new FORMELEMENTGROUP(form.fieldset.body.pane, new MODEL().set({\r\n\t\t\t'label': 'FORMELEMENTGROUP',\r\n\t\t\t'showHeader': 0\r\n\t\t}));\r\n\t\treturn form;\r\n\t}\r\n\t/**\r\n        Sets the POST url for this form\r\n        @param {string} url Target url\r\n        @returns {ThisType} Returns this form\r\n    */\r\n\tsetPostUrl(url) {\r\n\t\tthis.postUrl = url;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t\t    Disables all fieldsets within this form\r\n\t        @returns {boolean} Returns true if successful\r\n\t\t*/\r\n\tlock() {\r\n\t\ttry {\r\n\t\t\t//console.log('Locking FORM...');\r\n\t\t\tfor (let i = 0; i < this.children.length; i++) {\r\n\t\t\t\tthis.children[i].el.disabled = true;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('Unable to lock this form');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t\t    Enables all fieldsets within this form\r\n\t        @returns {boolean} Returns true if successful\r\n\t\t*/\r\n\tunlock() {\r\n\t\t//console.log('Unlocking FORM...');\r\n\t\tfor (let i = 0; i < this.children.length; i++) {\r\n\t\t\ttry {\r\n\t\t\t\tthis.children[i].el.disabled = false;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (e instanceof TypeError) {\r\n\t\t\t\t\tconsole.warn('Unable to lock \"' + this.children[i].element + '\"');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t\t    HTML encodes all form element values\r\n\t        @returns {void}\r\n\t\t*/\r\n\thtmlEncodeValues() {\r\n\t\ttry {\r\n\t\t\tfor (let e = 0; e < this.el.elements.length; e++) {\r\n\t\t\t\tconsole.log('Encode type: ' + this.el.elements[e].type);\r\n\t\t\t\tif (this.el.elements[e].type === 'text' || this.el.elements[e].type === 'textarea') {\r\n\t\t\t\t\tthis.el.elements[e].value = this.htmlEncode(this.el.elements[e].value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log('FORM.htmlEncodeValues() failed.');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t    Returns only alphanumeric characters\r\n\t    @param {any} str String to convert\r\n\t    @returns {string} A string of only alphanumeric characters\r\n\t\t\r\n\talphaNumeric(str) {\r\n\t\tstr = str === undefined ? '' : str.toString().replace(/^[a-zA-Z0-9-_]+$/, '');\r\n\t\t// /^[a-zA-Z0-9-_]+$/\r\n\t\treturn str === null || str === undefined ? '' : str.toString().replace(/[\\[\\]']/g, '');\r\n\t} */\r\n\t/**\r\n\t\t     Flags the given element as invalid \r\n\t\t     @param {any} element The form element\r\n\t         @returns {void}\r\n\t\t*/\r\n\tsetInvalid(element) {\r\n\t\tthis.payload.isValid = false;\r\n\t\telement.focus();\r\n\t\telement.setAttribute('data-valid', this.payload.isValid);\r\n\t\t$(element.previousSibling).addClass('invalid'); // Set label class to 'invalid'\r\n\t}\r\n\t/**\r\n\t    Validate the current form and return true if form is valid\r\n\t    Note that this is a simple form of validation that occurs on the\r\n\t    client side and should not be used as a substitution for\r\n\t    server side validation.\r\n\t    @returns {object} The validation payload\r\n\t*/\r\n\tvalidate() {\r\n\t\t//console.log('Validating...');\r\n\t\tthis.htmlEncodeValues();\r\n\t\tthis.payload = {\r\n\t\t\tisValid: true,\r\n\t\t\tformName: this.el.name\r\n\t\t};\r\n\t\tfor (let e = 0; e < this.el.elements.length; e++) {\r\n\t\t\t//DEBUG.log('Element: ' + this.el.elements[e].name);\r\n\t\t\tswitch (this.el.elements[e].type) {\r\n\t\t\t\tcase 'input':\r\n\t\t\t\tcase 'text':\r\n\t\t\t\tcase 'email':\r\n\t\t\t\tcase 'tel':\r\n\t\t\t\tcase 'password':\r\n\t\t\t\t\tif (this.el.elements[e].checkValidity()) { // HTML5 Validation\r\n\t\t\t\t\t\tif (this.el.elements[e].value === '') {\r\n\t\t\t\t\t\t\tthis.setInvalid(this.el.elements[e]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$(this.el.elements[e]).removeClass('invalid');\r\n\t\t\t\t\t\t\tthis.el.elements[e].setAttribute('data-valid', this.payload.isValid);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(this.el.elements[e].name + ' -- isValid: ' + this.el.elements[e].checkValidity());\r\n\t\t\t\t\t\tthis.setInvalid(this.el.elements[e]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase 'select-one':\r\n\t\t\t\t\tif (this.el.elements[e].selectedIndex === 0) {\r\n\t\t\t\t\t\tthis.setInvalid(this.el.elements[e]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$(this.el.elements[e]).removeClass('invalid');\r\n\t\t\t\t\t\tthis.el.elements[e].setAttribute('data-valid', this.payload.isValid);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn('Unable to validate unidentified form element type.');\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log('Validation Result: ' + this.payload.isValid);\r\n\t\treturn this.payload;\r\n\t}\r\n\t/**\r\n\t\t    Resets the form and any validation notifications.\r\n\t        @returns {void}\r\n\t\t*/\r\n\treset() {\r\n\t\tconsole.log('Resetting form[' + this.el.name + ']');\r\n\t\tfor (let e = 0; e < this.el.elements.length; e++) {\r\n\t\t\tthis.el.elements[e].removeAttribute('data-valid');\r\n\t\t\t$(this.el.elements[e].previousSibling).removeClass('invalid');\r\n\t\t}\r\n\t\tthis.el.reset();\r\n\t}\r\n\t/**\r\n\t    Serialize the form into an array\r\n\t    @returns {array} Form Results as an Array of key/value pairs\r\n\t*/\r\n\tgetResultsAsArray() {\r\n\t\tconsole.log('FORM.getResultsAsArray()');\r\n\t\treturn $(this.el).serializeArray();\r\n\t}\r\n\t/**\r\n\t    If valid, Returns a FormPost based on values in this form\r\n\t    @returns {FormPost} A FormPost Object\r\n\t*/\r\n\tgetFormPost() {\r\n\t\treturn this.validate().isValid ? new FORMPOST(this) : null;\r\n\t}\r\n\t/**\r\n\t\t    Post values to server.\r\n\r\n\t\t    Posts the contents of the given Form Post to the specified url\r\n\t\t    and updates the given prompt.\r\n\r\n\t\t    param {CONTAINER} master The master element whos state and id is to be updated\r\n\t        @async\r\n\t        @returns {Promise<object>} The results of the Form Post\r\n\r\n\t\t*/\r\n\tpost() {\r\n\t\tconsole.log(10, 'Posting values to server: ' + this.postUrl);\r\n\t\tlet formPost = this.getFormPost();\r\n\t\tif (formPost) {\r\n\t\t\tthis.lock();\r\n\t\t\tconsole.log('Posting to: ' + this.postUrl, formPost);\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: this.postUrl,\r\n\t\t\t\ttype: \"POST\",\r\n\t\t\t\tdata: formPost,\r\n\t\t\t\terror(xhr, statusText, errorThrown) {\r\n\t\t\t\t\tconsole.log(100, 'Access Denied: ' + statusText + '(' + xhr.status + ')', errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tstatusCode: {\r\n\t\t\t\t\t200(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 200', response.message, true);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t201(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 201', response);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t400(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 400', response);\r\n\t\t\t\t\t},\r\n\t\t\t\t\t403(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 403', 'Access Denied', response);\r\n\t\t\t\t\t\t//app.login();\r\n\t\t\t\t\t},\r\n\t\t\t\t\t404(response) {\r\n\t\t\t\t\t\tconsole.log('StatusCode: 404', response);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tsuccess: (payload) => {\r\n\t\t\t\t\tconsole.log('Posted results to server.', payload.message);\r\n\t\t\t\t\tthis.unlock();\r\n\t\t\t\t\tthis.afterSuccessfulPost(payload);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(0, 'Post Failed to submit.  Values may be invalid.');\r\n\t\t\tthis.getMainContainer().loader.showConsole();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t    Creates an Input Model\r\n\t    @param {string} element Element name\r\n\t    @param {string} name Input name\r\n\t    @param {string} label Label to display\r\n\t    @param {string} value Value of input\r\n\t    @param {string} type The input type\r\n\t    @returns {MODEL} An input model\r\n\t */\r\n\tcreateInputModel(element, name, label, value = '', type = 'TEXT') {\r\n\t\treturn new MODEL(new ATTRIBUTES({\r\n\t\t\tname,\r\n\t\t\tvalue,\r\n\t\t\t'type': type === 'FORMPOSTINPUT' ? 'NUMBER' : type\r\n\t\t})).set({\r\n\t\t\telement,\r\n\t\t\tlabel,\r\n\t\t\ttype\r\n\t\t})\r\n\t}\r\n}\r\nexport { ATTRIBUTES, FORMFOOTER, FORMINPUT, FORMPOST, INPUTTYPES, MODEL };"]}