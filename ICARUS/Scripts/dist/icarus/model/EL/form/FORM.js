import CONTAINER,{ATTRIBUTES,ICONS,INPUTTYPES,MODEL}from"../container/CONTAINER.js";import FIELDSET from"../fieldset/FIELDSET.js";import FORMELEMENTGROUP from"../container/formelement/FORMELEMENTGROUP.js";import FORMFOOTER from"./FORMFOOTER.js";import FORMINPUT from"../container/formelement/forminput/FORMINPUT.js";import FORMINPUTTOKEN from"../container/formelement/forminput/forminputtoken/FORMINPUTTOKEN.js";import FORMPOST from"./FORMPOST.js";export default class FORM extends CONTAINER{constructor(e,t){super(e,"FORM",t,["FIELDSET"]),this.tokenInput=new FORMINPUTTOKEN(this,(new MODEL).set({token:""})),this.setPostUrl("Form/Submit"),this.updateUrl="Form/Update",this.fieldsets=[],this.footer=new FORMFOOTER(this.body,new MODEL),this.footer.buttonGroup.addButton("Submit",ICONS.SAVE).el.onclick=this.post.bind(this),this.populate(t.children)}construct(){}static createEmptyForm(e,t=!1){let s=new FORM(e,new MODEL(new ATTRIBUTES({style:t?"display:none;":""})).set({label:"FORM",showHeader:0}));return s.fieldset=new FIELDSET(s.body.pane,(new MODEL).set({label:"FIELDSET",showHeader:0})),s.fieldset.formElementGroup=new FORMELEMENTGROUP(s.fieldset.body.pane,(new MODEL).set({label:"FORMELEMENTGROUP",showHeader:0})),s}setPostUrl(e){this.postUrl=e}lock(){try{for(let e=0;e<this.children.length;e++)this.children[e].el.disabled=!0;return!0}catch(e){throw console.log("Unable to lock this form"),e}}unlock(){for(let e=0;e<this.children.length;e++)try{this.children[e].el.disabled=!1}catch(t){if(!(t instanceof TypeError))throw t;console.warn('Unable to lock "'+this.children[e].element+'"')}}htmlEncodeValues(){try{for(let e=0;e<this.el.elements.length;e++)console.log("Encode type: "+this.el.elements[e].type),"text"!==this.el.elements[e].type&&"textarea"!==this.el.elements[e].type||(this.el.elements[e].value=this.htmlEncode(this.el.elements[e].value))}catch(e){throw console.log("FORM.htmlEncodeValues() failed."),e}}setInvalid(e){this.payload.isValid=!1,e.focus(),e.setAttribute("data-valid",this.payload.isValid),$(e.previousSibling).addClass("invalid")}validate(){this.htmlEncodeValues(),this.payload={isValid:!0,formName:this.el.name};for(let e=0;e<this.el.elements.length;e++)switch(this.el.elements[e].type){case"input":case"text":case"email":case"tel":case"password":if(this.el.elements[e].checkValidity()){""===this.el.elements[e].value?this.setInvalid(this.el.elements[e]):($(this.el.elements[e]).removeClass("invalid"),this.el.elements[e].setAttribute("data-valid",this.payload.isValid));break}console.log(this.el.elements[e].name+" -- isValid: "+this.el.elements[e].checkValidity()),this.setInvalid(this.el.elements[e]);break;case"select-one":0===this.el.elements[e].selectedIndex?this.setInvalid(this.el.elements[e]):($(this.el.elements[e]).removeClass("invalid"),this.el.elements[e].setAttribute("data-valid",this.payload.isValid));break;default:console.warn("Unable to validate unidentified form element type.")}return console.log("Validation Result: "+this.payload.isValid),this.payload}reset(){console.log("Resetting form["+this.el.name+"]");for(let e=0;e<this.el.elements.length;e++)this.el.elements[e].removeAttribute("data-valid"),$(this.el.elements[e].previousSibling).removeClass("invalid");this.el.reset()}getResultsAsArray(){return console.log("FORM.getResultsAsArray()"),$(this.el).serializeArray()}getFormPost(){return this.validate().isValid?new FORMPOST(this):null}post(){console.log(10,"Posting values to server: "+this.postUrl);let e=this.getFormPost();e?(this.lock(),console.log("Posting to: "+this.postUrl,e),$.ajax({url:this.postUrl,type:"POST",data:e,error(e,t,s){console.log(100,"Access Denied: "+t+"("+e.status+")",s)},statusCode:{200(e){console.log("StatusCode: 200",e.message,!0)},201(e){console.log("StatusCode: 201",e)},400(e){console.log("StatusCode: 400",e)},403(e){console.log("StatusCode: 403","Access Denied",e)},404(e){console.log("StatusCode: 404",e)}},success:e=>{console.log("Posted results to server.",e.message),this.unlock(),this.afterSuccessfulPost(e)}})):(console.log(0,"Post Failed to submit.  Values may be invalid."),this.getMainContainer().loader.showConsole())}createInputModel(e,t,s,l="",o="TEXT"){return new MODEL(new ATTRIBUTES({name:t,value:l,type:"FORMPOSTINPUT"===o?"NUMBER":o})).set({element:e,label:s,type:o})}}export{ATTRIBUTES,FORMFOOTER,FORMINPUT,FORMPOST,INPUTTYPES,MODEL};
//# sourceMappingURL=FORM.js.map
