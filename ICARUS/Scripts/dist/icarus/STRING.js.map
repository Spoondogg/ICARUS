{"version":3,"sources":["STRING.js"],"names":["STRING","String","[object Object]","this","split","map","word","index","toLowerCase","charAt","toUpperCase","slice","join","replace","length","ending","substring","valueOf","num","size","s","Date","parseInt","s4","Math","floor","random","toString"],"mappings":"eAQe,MAAMA,eAAeC,OAMhCC,YACI,OAAOC,KAAKC,MAAM,KAAKC,IAAI,SAAUC,EAAMC,GACvC,OAAiB,IAAVA,EAAcD,EAAKE,cAAgBF,EAAKG,OAAO,GAAGC,cAAgBJ,EAAKK,MAAM,GAAGH,gBACxFI,KAAK,IAMZV,eACI,OAAOC,KAAKU,QAAQ,oBAAqB,IAAIA,QAAQ,WAAY,KAAO,GAM5EX,WACI,OAAOC,KAAKU,QAAQ,sBAAuB,KAAO,GAOtDX,SAASY,EAAS,IAAKC,EAAS,OAC5B,OAAOZ,KAAKW,OAASA,EAASX,KAAKa,UAAU,EAAGF,EAASC,EAAOD,QAAUC,EAASZ,KAAKc,UAO5Ff,IAAIgB,EAAKC,GACL,IAAIC,EAAInB,OAAOiB,GACf,KAAOE,EAAEN,OAASK,GACdC,EAAI,IAAMA,EAEd,OAAOA,EAOXlB,eACI,OAAO,IAAImB,KAAKC,SAASnB,KAAKU,QAAQ,QAAS,MAKnDX,OACI,MAAMqB,EAAK,IAAMC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqBC,SAAS,IAAIX,UAAU,GAClF,SAAUO,IAAOA,OAAQA,OAAQA,OAAQA,OAAQA,IAAOA,IAAOA","file":"STRING.js","sourcesContent":["/** Extends the built in String class with static formatting methods\r\n    @see https://stackoverflow.com/questions/30257915/extend-a-string-class-in-es6\r\n    @see http://www.loganfranken.com/blog/864/es6-everyday-extending-built-in-classes/\r\n    @description Caution, there be wolves! \r\n    @see http://kangax.github.io/compat-table/es6/\r\n    @class\r\n    @extends String\r\n*/\r\nexport default class STRING extends String {\r\n    /** Returns string as camelcase\r\n        @static\r\n        @see https://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\r\n        @returns {String} A camel case formatted string\r\n    */\r\n    camelcase() {\r\n        return this.split(' ').map(function (word, index) {\r\n            return index === 0 ? word.toLowerCase() : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n        }).join('');\r\n    }\r\n    /** Returns only alphanumeric values\r\n        @see https://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\r\n        @returns {String} A string of only alphanumeric characters from given string\r\n    */\r\n    alphanumeric() {\r\n        return this.replace(/^[a-zA-Z0-9-_]+$/u, '').replace(/[[\\]']/gu, '') || '';\r\n    }\r\n    /** Returns a friendly formatted string, safe for html and web components\r\n        @method\r\n        @returns {String} HTML friendly string\r\n    */\r\n    friendly() {\r\n        return this.replace(/^[a-z|A-Z|0-9|\\s]*/u, '') || '';\r\n    }\r\n    /** Trims the given string to the specified length and applies the given ending\r\n        @param {number} length Length to trim string\r\n        @param {string} ending String to append\r\n        @returns {string} A string truncated to the given length\r\n    */\r\n    truncate(length = 100, ending = '...') {\r\n        return this.length > length ? this.substring(0, length - ending.length) + ending : this.valueOf()\r\n    }\r\n    /** Pad with zeroes\r\n        @param {number} num The original number to be padded\r\n        @param {number} size The number of zeros to pad with\r\n        @returns {string} A zero padded string\r\n    */\r\n    pad(num, size) {\r\n        let s = String(num);\r\n        while (s.length < size) {\r\n            s = '0' + s;\r\n        }\r\n        return s;\r\n    }\r\n    /** Returns a Javascript Date object based on a given .NET JavaScriptSerializer date value\r\n        @see https://stackoverflow.com/a/50292370/722785\r\n        param {string} dateString from .NET Serializer ie: Date(1534759609990)\r\n        @returns {Date} Javascript Date Object\r\n    */\r\n    getDateValue() {\r\n        return new Date(parseInt(this.replace(/\\D+/gu, '')));\r\n    }\r\n    /** Create a globally unique identifier\r\n        @returns {String} Globally unique identifier\r\n    */\r\n    guid() {\r\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4() + s4() + s4()}`;\r\n    }\r\n}"]}